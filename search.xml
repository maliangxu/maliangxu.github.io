<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[微信接口实现方法(企业号)]]></title>
      <url>http://yoursite.com/2016/08/09/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-发消息-能力接口"><a href="#1-发消息-能力接口" class="headerlink" title="1.发消息(能力接口)"></a>1.发消息(能力接口)</h1><h2 id="1-1-发送接口说明"><a href="#1-1-发送接口说明" class="headerlink" title="1.1    发送接口说明"></a>1.1    发送接口说明</h2><ul>
<li>请求说明<br>Https请求方式: POST<br><a href="https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN" target="_blank" rel="external">https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</a><br>消息型应用支持文本、图片、语音、视频、文件、图文等消息类型。主页型应用只支持文本消息类型，且文本长度不超过20个字。</li>
<li>参数说明<br>access_token:调用接口凭证</li>
<li>权限说明<br>收件人必须处于应用的可见范围内，并且管理组对应用有使用权限、对收件人有查看权限，否则本次调用失败。</li>
<li>返回结果<br>如果无权限，则本次发送失败；如果收件人不存在或未关注，发送仍然执行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"ok"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-消息类型及数据格式"><a href="#1-2-消息类型及数据格式" class="headerlink" title="1.2    消息类型及数据格式"></a>1.2    消息类型及数据格式</h2><p>微信共提供7种消息类型：<br>1、text消息；2、image消息；3、voice消息；4、video消息；5、file消息；6、news消息；7、mpnews消息；以news消息为例，请求数据格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  touser: <span class="string">'userID1|userID2'</span>, <span class="comment">//成员ID列表</span></span><br><span class="line">  msgtype: <span class="string">'news'</span>, <span class="comment">//消息类型</span></span><br><span class="line">  agented: <span class="number">1</span>, <span class="comment">//企业应用的id，整型。</span></span><br><span class="line">  news: &#123;</span><br><span class="line">  	articles: [ <span class="comment">//图文消息</span></span><br><span class="line">  	  &#123;</span><br><span class="line">  	  	title: <span class="string">'Title'</span>, <span class="comment">//标题</span></span><br><span class="line">  	  	description: <span class="string">'Description'</span>, <span class="comment">//描述</span></span><br><span class="line">  	  	url: <span class="string">'URL'</span>, <span class="comment">//点击后跳转的链接</span></span><br><span class="line">  	  	picurl: <span class="string">'PIC_URL'</span> <span class="comment">//图文消息的图片链接</span></span><br><span class="line">  	  &#125;,</span><br><span class="line">  	  &#123;</span><br><span class="line">  	  	title: <span class="string">'Title'</span>,</span><br><span class="line">  	  	description: <span class="string">'Description'</span>,</span><br><span class="line">  	  	url: <span class="string">'URL'</span>,</span><br><span class="line">  	  	picurl: <span class="string">'PIC_URL'</span></span><br><span class="line">  	  &#125;</span><br><span class="line">  	]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-调用方法"><a href="#1-3-调用方法" class="headerlink" title="1.3    调用方法"></a>1.3    调用方法</h2><p>以服务器端语言PHP为例，具体介绍接口的调用过程：</p>
<h3 id="1-3-1-获取企业密钥"><a href="#1-3-1-获取企业密钥" class="headerlink" title="1.3.1    获取企业密钥"></a>1.3.1    获取企业密钥</h3><p>利用cURL请求URL，请求方式为GET请求，这里为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<p>同时，由于获取密钥的有效期为7200秒，(通过获取到的结果中expires_in属性可以查看)，频繁请求接口容易导致受限，为解决以上问题我们采用读取PHP文件缓存的技术。这里我们调用PHP的file_get_contents()函数来读取PHP文件，它的作用是将整个文件读入一个字符串中，且可安全用于二进制对象。成功读取到文件后便可利用文件存储的缓存时间与当前时间做判断，若小于当前时间代表密钥过期，需重新请求密钥，若大于当前时间可直接获得缓存密钥，实现过程如图1所示。</p>
<p><img src="http://i2.piimg.com/567571/1cb1e11e9993fb71.png" alt=""></p>
<h3 id="1-3-2-JSON编码"><a href="#1-3-2-JSON编码" class="headerlink" title="1.3.2    JSON编码"></a>1.3.2    JSON编码</h3><p>整理并通过json_encode函数编码请求参数时，会出现使汉字编码成’\U<em>*</em>’的形式(php5.4已经解决这个问题，使用json_encode(“中文”, JSON_UNESCAPED_UNICODE))。为解决此问题，我们采用字符转码方式，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode_json</span>(<span class="params">$str</span>)</span>&#123;  </span><br><span class="line">  $code = json_encode($str);  </span><br><span class="line">  <span class="keyword">return</span> preg_replace(<span class="string">"#\\\u([0-9a-f]&#123;4&#125;)#ie"</span>, <span class="string">"iconv('UCS-2', 'UTF-8', pack('H4', '\\1'))"</span>, $code); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过简单的正则替换方法，解决汉字不能正常显示的问题。</p>
<h3 id="1-3-3-POST请求"><a href="#1-3-3-POST请求" class="headerlink" title="1.3.3    POST请求"></a>1.3.3    POST请求</h3><p>发出POST请求，完成发送消息功能。这里我们使用cURL实现POST请求的方法。cURL是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。使用cURL完成请求的基本步骤为：<br>1）初始化    curl_init()<br>2）设置变量     curl_setopt()<br>3）执行并获取结果    curl_exec()<br>4）释放cURL句柄    curl_close()<br>通过设置cURL选项实现POST的请求如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);</span><br></pre></td></tr></table></figure></p>
<h1 id="2-身份验证-认证接口"><a href="#2-身份验证-认证接口" class="headerlink" title="2    身份验证(认证接口)"></a>2    身份验证(认证接口)</h1><h2 id="2-1-OAuth验证接口"><a href="#2-1-OAuth验证接口" class="headerlink" title="2.1     OAuth验证接口"></a>2.1     OAuth验证接口</h2><p>企业应用中的URL链接（包括自定义菜单或者消息中的链接），可以通过微信OAuth2.0验证接口来获取成员的身份信息。</p>
<h2 id="2-2-企业获取code"><a href="#2-2-企业获取code" class="headerlink" title="2.2     企业获取code"></a>2.2     企业获取code</h2><p>企业如果需要员工在跳转到企业网页时带上员工的身份信息，需构造如下的链接：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//open.weixin.qq.com/connect/oauth2/authorize?appid=CORPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span></span><br></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>appid: 企业的CorpID</li>
<li>redirect_uri: 授权后重定向的回调链接地址</li>
<li>response_type: 返回类型，此时固定为code</li>
<li>scope: 应用授权作用域，此时固定为：snsapi_base</li>
<li>#wechat_redirect: 微信终端使用此参数判断是否需要带上身份信息<br>员工点击后，页面将跳转至 redirect_uri?code=CODE&amp;state=STATE，企业可根据code参数获得员工的userid。</li>
</ul>
<h2 id="2-3-根据code获取成员信息"><a href="#2-3-根据code获取成员信息" class="headerlink" title="2.3     根据code获取成员信息"></a>2.3     根据code获取成员信息</h2><ul>
<li><p>Https请求方式：GET</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=ACCESS_TOKEN&amp;code=CODE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数说明：<br>access_token：调用接口凭证<br>code：通过成员授权获取到的code</p>
</li>
<li><p>返回结果：</p>
</li>
</ul>
<p>企业成员授权时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'UserId'</span>:<span class="string">'USERID'</span>,</span><br><span class="line">  <span class="string">'DeviceId'</span>:<span class="string">'DEVICEID'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>非企业成员授权时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'OpenId'</span>:<span class="string">'OPENID'</span>,</span><br><span class="line">  <span class="string">'DeviceId'</span>:<span class="string">'DEVICEID'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>出错时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'errcode'</span>: <span class="number">40029</span>,</span><br><span class="line">  <span class="string">'errmsg'</span>:<span class="string">'invalid code'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-4-调用方法"><a href="#2-4-调用方法" class="headerlink" title="2.4     调用方法"></a>2.4     调用方法</h2><p>获取企业密钥和code参数后，通过cURL配置选项参数，发送GET请求，并将请求结果返回到前端进行解析和处理。这里前端code参数的获取来自当前所有浏览器都支持的window对象的location对象，其包含的search属性即window.Location.search用来获取当前url中”?”后面的字符串。编写正则表达式以匹配字符串中的code值:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>); </span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">window</span>.location.search;</span><br><span class="line"><span class="keyword">var</span> r = url.substr(<span class="number">1</span>).match(reg);</span><br><span class="line"><span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="3-管理成员-资源接口"><a href="#3-管理成员-资源接口" class="headerlink" title="3    管理成员(资源接口)"></a>3    管理成员(资源接口)</h1><p>微信企业号公众平台提供管理企业内部成员包括创建、更新、删除以及获取成员的开放接口。根据各接口的请求方式，在服务器端(以PHP为例)利用cURL发送请求并将请求结果返回到前端进行解析和处理，通过AJAX实现前后端数据的传递。此处，我们采用了jQuery的promise用法，即函数调用返回一个promise对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//… some code</span></span><br><span class="line">	<span class="keyword">return</span> $.ajax(<span class="built_in">Object</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>
<p>Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。</p>
<p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于百度地图API的空间地理编码技术]]></title>
      <url>http://yoursite.com/2016/08/09/%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9C%B0%E7%90%86%E7%BC%96%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h1 id="1-地理编码概述"><a href="#1-地理编码概述" class="headerlink" title="1.地理编码概述"></a>1.地理编码概述</h1><p>随着各种类型空间数据的日益丰富，如何对这些异构数据进行有效融合和集成越来越成为地理信息科学目前需要迫切解决的问题之一。地理编码也称地址匹配，是指将地址映射成地理坐标的过程，即提供一种把描述成文本地址的地理位置信息转换为地理坐标的方式。它是地址定位的关键技术，也是解决信息共享的有效途径。本文提出了一种基于百度API将本地地址信息数据发布到在线地图的实现技术，主要研究本地数据的上传与解析以及坐标转换的问题。提出的技术路线在华东师范大学具有自主知识产权的CCGIS平台上得到了很好的验证。</p>
<h1 id="2-主流地图API简介"><a href="#2-主流地图API简介" class="headerlink" title="2.主流地图API简介"></a>2.主流地图API简介</h1><p>当前用户关注度比较高的地图API主要有Google地图API、微软公司的bing地图API以及国内的百度地图API；对比其他两家国外地图而言，百度地图拥有更简洁明了的界面，地图的更新速度明显优于Google，对国内中小城市地图信息的覆盖也较前者更加全面。百度地图API是一套由javascript语言编写的应用程序接口，支持PC端和移动端基于浏览器的地图应用开发，提供的地图服务功能包括地图的查询、显示、标注及编辑等。本文研究的技术所用到的主要API包括地址解析及逆地址解析接口，即通过调用地址解析器实例的getPoint()方法对指定的地址进行解析，将字符串地址转为BDLatLng。由于百度对外接口的坐标系并不是GPS采集的真实经纬度，这里我们通过坐标转换接口对百度坐标进行了百度坐标转WGS坐标的坐标转换工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3--font-face使用]]></title>
      <url>http://yoursite.com/2016/08/09/CSS3--font-face%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><ul>
<li>@font-face是CSS3中的一个模块，主要是把自己定义的Web字体嵌入到你的网页中，不用担心兼容性，@font-face在IE4中都支持。</li>
<li>如果是用字体做logo，英文的话字体和图片占用大小差不多，但是中文的字体包一般比较大，最好还是使用图片的形式。</li>
</ul>
<h2 id="为什么要将icon做成字体？"><a href="#为什么要将icon做成字体？" class="headerlink" title="为什么要将icon做成字体？"></a>为什么要将icon做成字体？</h2><p>字体文件小，一般20-50kb； 容易编辑和维护，尺寸和颜色可以用css来控制； 透明完全兼容IE6；当然，Icon Font也是有缺点的，由于是字体，所以只支持图片上是纯色的，多种颜色的就不支持了。</p>
<h2 id="各个浏览器对字体格式的支持是最大的区别："><a href="#各个浏览器对字体格式的支持是最大的区别：" class="headerlink" title="各个浏览器对字体格式的支持是最大的区别："></a>各个浏览器对字体格式的支持是最大的区别：</h2><p>webkit/safari：支持TrueType/OpenType(.ttf)，OpenType PS(.otf)，iOS4.2+支持.ttf，iOS 4.2以下只支持SVG字体；<br>Chrome：除webkit支持的以外，从Chrome 6开始，开始支持woff格式；<br>Firefox：支持.ttf和.otf，从Firefox 3.6开始支持woff格式；<br>Opera：支持.ttf、.otf、.svg。Opera 11开始支持WOFF； IE：只支持eot格式，IE9开始支持woff。</p>
<h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2.快速实践"></a>2.快速实践</h1><ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体</a>需要格式为.tff格式的字体文件</li>
<li>搜索Webfont Generator，或者直接使用<a href="https://www.web-font-generator.com/" target="_blank" rel="external">该网站</a>提供的服务。这很简单，进入网站后选择.tff字体文件上传，勾选同意的复选框，点击<code>Generate web font</code>，点击<code>Download Package</code>下载，解压缩文件。</li>
<li>使用<br>新建index.css</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.svg#SingleMaltaRegular'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-class">.demo</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>hello world!You are my Destiny<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-字体icon"><a href="#3-字体icon" class="headerlink" title="3.字体icon"></a>3.字体icon</h1><p>使用某些字体，如：<code>WebSymbols-Regular</code><a href="http://pan.baidu.com/s/1jIO0Y2q" target="_blank" rel="external">百度云下载地址</a>，<code>Guifx</code>字体，包括现在开源的比较流行的<code>Font Awesome</code>,使用方法同上。在html文件中如下示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>C<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>D<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>F<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一行显示的是其对应的图标<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/font-icon.png" alt=""></p>
<p>参考文献：</p>
<ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体的地方</a></li>
<li><a href="http://www.w3cplus.com/content/css3-font-face" target="_blank" rel="external">CSS3 @font-face</a></li>
<li><a href="http://www.w3cplus.com/css3/web-icon-with-font-face" target="_blank" rel="external">@font-face制作Web Icon</a></li>
</ul>
<p>附在线icon font字体图标库：<br><a href="http://www.weste.net/2013/12-13/94697.html" target="_blank" rel="external">http://www.weste.net/2013/12-13/94697.html</a><br><a href="http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51" target="_blank" rel="external">http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51</a> 阿里巴巴矢量图标<br><a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="external">https://www.fontsquirrel.com/tools/webfont-generator</a><br><a href="http://fontello.com/" target="_blank" rel="external">http://fontello.com/</a><br><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a><br><a href="http://glyphicons.com/" target="_blank" rel="external">http://glyphicons.com/</a><br><a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript的setter getter方法总结]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E7%9A%84setter%20getter%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>javascript的setter getter方法一共有五种实现方式</p>
<ul>
<li>1.通过对象初始化器定义</li>
<li>2.使用 Object.create 方法</li>
<li>3.使用 Object.defineProperty 方法</li>
<li>4.使用 Object.defineProperties 方法</li>
<li>5.使用 Object.prototype.<strong>defineGetter</strong> 以及 Object.prototype.<strong>defineSetter</strong> 方法</li>
</ul>
<h1 id="1-通过对象初始化器定义"><a href="#1-通过对象初始化器定义" class="headerlink" title="1.通过对象初始化器定义"></a>1.通过对象初始化器定义</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,<span class="comment">//通过 get,set的 b,c方法间接性修改 a 属性</span></span><br><span class="line">    set c(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.c = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<p>我们试着将get set的方法改写成同名,结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set b(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.b = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//26</span></span><br></pre></td></tr></table></figure>
<p>es6中的新语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">"bb"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"cc"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    _a : <span class="number">8</span>,</span><br><span class="line">    get [b]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>._a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set [c](x)&#123;<span class="keyword">this</span>._a = x/<span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o[b]);<span class="comment">//9</span></span><br><span class="line">o[<span class="string">"cc"</span>] = <span class="number">50</span>;<span class="comment">//等同于o.c = 50;</span></span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<h1 id="2-使用-Object-create-方法"><a href="#2-使用-Object-create-方法" class="headerlink" title="2.使用 Object.create 方法"></a>2.使用 <code>Object.create</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125;;</span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o.a;<span class="comment">//或者this.a结果一样</span></span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//undefined</span></span><br><span class="line">o.bar = <span class="number">12</span>; </span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//12</span></span><br></pre></td></tr></table></figure>
<h1 id="3-使用-Object-defineProperty-方法"><a href="#3-使用-Object-defineProperty-方法" class="headerlink" title="3.使用 Object.defineProperty 方法"></a>3.使用 <code>Object.defineProperty</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125; <span class="comment">//声明一个对象,包含一个 a 属性,值为1</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//10</span></span><br><span class="line">o.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h1 id="4-使用-Object-defineProperties-方法"><a href="#4-使用-Object-defineProperties-方法" class="headerlink" title="4.使用 Object.defineProperties 方法"></a>4.使用 <code>Object.defineProperties</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; a: <span class="number">1</span>, b: <span class="string">"sss"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    <span class="string">"A"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.a = val; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"B"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.b + <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.b = val &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//sss2</span></span><br><span class="line">obj.A = <span class="number">3</span>;</span><br><span class="line">obj.B = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//hello2</span></span><br></pre></td></tr></table></figure>
<h1 id="5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法"><a href="#5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法" class="headerlink" title="5.使用Object.prototype.__defineGetter__ 以及 Object.prototype.__defineSetter__ 方法"></a>5.使用<code>Object.prototype.__defineGetter__</code> 以及 <code>Object.prototype.__defineSetter__</code> 方法</h1><p>这两种方法是非标准，最好不要在开发中使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; _a: <span class="number">1</span> &#125;;</span><br><span class="line">o.__defineGetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a;</span><br><span class="line">&#125;);</span><br><span class="line">o.__defineSetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._a = val;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//1</span></span><br><span class="line">o.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[现代web前端开发工具和流程]]></title>
      <url>http://yoursite.com/2016/08/04/%E7%8E%B0%E4%BB%A3web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%92%8C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><ul>
<li><strong>SVN</strong> </li>
<li><strong>GIT</strong><br>推荐使用git，git安装和图形化界面tortoiseGit安装，<a href="http://www.cnblogs.com/peterzd/archive/2012/04/22/2465230.html" target="_blank" rel="external">git与github联系</a>不在本文的讨论范围，请自行搜索。<br>在github中新建一个项目<br>在本地使用图形Git–&gt;git clone<br>或者使用命令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone  git:<span class="comment">//github.com/someone/some_project.git</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>文件夹就是我们的项目文件夹。</p>
<h1 id="2-前端自动化"><a href="#2-前端自动化" class="headerlink" title="2.前端自动化"></a>2.前端自动化</h1><ul>
<li><strong><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></strong></li>
<li><strong><a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></strong></li>
</ul>
<h2 id="2-1-gulp"><a href="#2-1-gulp" class="headerlink" title="2.1 gulp"></a>2.1 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></h2><p>Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。当使用流时，Gulp去除了中间文件，只将最后的输出写入磁盘，整个过程因此变得更快。</p>
<h3 id="2-1-1-安装命令行工具"><a href="#2-1-1-安装命令行工具" class="headerlink" title="2.1.1 安装命令行工具"></a>2.1.1 安装命令行工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-创建好package-json文件（包管理文件）-安装局部gulp"><a href="#2-1-2-创建好package-json文件（包管理文件）-安装局部gulp" class="headerlink" title="2.1.2 创建好package.json文件（包管理文件）,安装局部gulp"></a>2.1.2 创建好package.json文件（包管理文件）,安装局部gulp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>
<p>下载的包会存放在项目的node_modules文件夹下<br>包依赖会加入到<code>package.json</code>中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1-3-新建gulpfile-js文件"><a href="#2-1-3-新建gulpfile-js文件" class="headerlink" title="2.1.3 新建gulpfile.js文件"></a>2.1.3 新建gulpfile.js文件</h3><h4 id="四个主要API"><a href="#四个主要API" class="headerlink" title="四个主要API"></a>四个主要API</h4><ul>
<li>gulp.task(name[, deps], fn)：注册任务</li>
<li>gulp.src(globs[, options])：指明源文件路径</li>
<li>gulp.dest(path)：指明任务处理后的目标输出路径</li>
<li>gulp.watch(glob[, options], tasks)／gulp.watch(glob[, options, cb])：监视文件的变化并运行相应的任务。</li>
</ul>
<p>实例见<code>3.2 在gulpfile.js中配置</code>。</p>
<h3 id="2-1-4-运行"><a href="#2-1-4-运行" class="headerlink" title="2.1.4 运行"></a>2.1.4 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure>
<h2 id="2-2-grunt"><a href="#2-2-grunt" class="headerlink" title="2.2 grunt"></a>2.2 <a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></h2><h3 id="2-2-1-安装-grunt-cli"><a href="#2-2-1-安装-grunt-cli" class="headerlink" title="2.2.1 安装 grunt-cli"></a>2.2.1 安装 grunt-cli</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli -g</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-配置grunt"><a href="#2-2-2-配置grunt" class="headerlink" title="2.2.2 配置grunt"></a>2.2.2 配置grunt</h3><p>在项目中添加两份文件：package.json 和 Gruntfile。</p>
<ul>
<li>package.json //项目自动化所依赖的相关插件。</li>
<li>Gruntfile.js //项目自动化工作流配置文件。</li>
</ul>
<h4 id="安装Grunt-和-grunt插件"><a href="#安装Grunt-和-grunt插件" class="headerlink" title="安装Grunt 和 grunt插件"></a>安装Grunt 和 grunt插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br><span class="line">npm install grunt-contrib-jshint --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="配置Gruntfile-js文件"><a href="#配置Gruntfile-js文件" class="headerlink" title="配置Gruntfile.js文件"></a>配置Gruntfile.js文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Project configuration.</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    uglify: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        banner: <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      build: &#123;</span><br><span class="line">        src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</span><br><span class="line">        dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载包含 "uglify" 任务的插件。</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认被执行的任务列表。</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-运行"><a href="#2-2-3-运行" class="headerlink" title="2.2.3 运行"></a>2.2.3 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure>
<h1 id="3-SASS"><a href="#3-SASS" class="headerlink" title="3.SASS"></a>3.SASS</h1><p>‘CSS预处理器’，它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p>
<h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-sass</span><br><span class="line">npm install --save-dev gulp-watch</span><br></pre></td></tr></table></figure>
<p><code>gulp-sass</code>是用来将SASS转化为CSS的，<code>gulp-watch</code>是用来观察文件修改的变化<br>我们来看<code>package.json</code>文件的变化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>:<span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"gulp-sass"</span>:<span class="string">"^2.3.1"</span>,</span><br><span class="line">    <span class="string">"gulp-watch"</span>:<span class="string">"^4.3.6"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-在gulpfile-js-中配置"><a href="#3-2-在gulpfile-js-中配置" class="headerlink" title="3.2 在gulpfile.js 中配置"></a>3.2 在<code>gulpfile.js</code> 中配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> path = &#123;</span><br><span class="line">    sass_isstudy:<span class="string">'./modules/istudy/sass/'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.sass_isstudy+<span class="string">'*.scss'</span>)</span><br><span class="line">        .pipe(sass.sync().on(<span class="string">'error'</span>, sass.logError))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./modules/istudy/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass:watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     gulp.watch(path.sass_isstudy+<span class="string">'*.scss'</span>, [<span class="string">'sass'</span>]);</span><br><span class="line">     <span class="comment">// gulp.watch('./modules/istudy/sass/*.scss').on('change',livereload);</span></span><br><span class="line">&#125;);   <span class="comment">//监控sass变化</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-命令执行"><a href="#3-3-命令执行" class="headerlink" title="3.3 命令执行"></a>3.3 命令执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp sass:watch</span><br></pre></td></tr></table></figure>
<p>执行上诉命令，在sass文件修改、保存后，gulp就会将sass文件转化为css文件</p>
<h1 id="4-模块化编程"><a href="#4-模块化编程" class="headerlink" title="4.模块化编程"></a>4.模块化编程</h1><p>具体参见文章【javascript模块化编程】</p>
<h2 id="4-1-ES5时代"><a href="#4-1-ES5时代" class="headerlink" title="4.1 ES5时代"></a>4.1 <strong>ES5时代</strong></h2><p>以seajs为例：<br>CMD(Custom Module Definition)通用模块加载</p>
<h3 id="4-1-1-seajs"><a href="#4-1-1-seajs" class="headerlink" title="4.1.1 seajs"></a>4.1.1 seajs</h3><p><strong>引入seajs文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>seajs 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-ES6时代"><a href="#4-2-ES6时代" class="headerlink" title="4.2 ES6时代"></a>4.2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<h1 id="5-组件化"><a href="#5-组件化" class="headerlink" title="5.组件化"></a>5.组件化</h1><p>组件化的思路是将一个模块独立开来，比如要写一个选择器按钮，将其分为三层：</p>
<p>  数据层：用来决定按钮个数以及按钮是否选择<br>  表现层：按钮使用现有的ui组件<br>  逻辑层：按钮事件等逻辑处理</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://blog.csdn.net/sunboy_2050/article/details/7529022" target="_blank" rel="external">Git 常用命令详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">SASS用法指南-阮一峰</a></li>
<li><a href="http://www.w3cplus.com/" target="_blank" rel="external">SASS入门</a></li>
<li>[阮一峰-es6入门]（<a href="http://es6.ruanyifeng.com/）" target="_blank" rel="external">http://es6.ruanyifeng.com/）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化]]></title>
      <url>http://yoursite.com/2016/08/04/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="1-ES5时代"><a href="#1-ES5时代" class="headerlink" title="1 ES5时代"></a>1 <strong>ES5时代</strong></h2><h3 id="1-1-原生代码实现模块化"><a href="#1-1-原生代码实现模块化" class="headerlink" title="1.1 原生代码实现模块化"></a>1.1 原生代码实现模块化</h3><p><strong>1) 对象写法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">　　　　_count : <span class="number">0</span>,</span><br><span class="line">　　　　m1 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　m2 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>2) 立刻执行函数</strong>(Immediately-Invoked Function Expression，IIFE) or 匿名闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>这样可以很好的保护私有变量，通过return来设置公开的方法。缺点也有: 动态添加方法的时候比较麻烦，且无法修改内部私有变量。<br><strong>3) 放大模式 or 宽放大模式（Loose augmentation）</strong><br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(module1);</span><br></pre></td></tr></table></figure></p>
<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">//...</span></span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>测试</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleTest = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value1=<span class="number">0</span>, privateName=<span class="string">'张三'</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateAddTopic</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 这里是内部处理代码</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"内部函数"</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">    mod.name = privateName;</span><br><span class="line">    mod.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.f1();</span><br><span class="line">    &#125;;</span><br><span class="line">    mod.f1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"f1--hello"</span>);</span><br><span class="line">    &#125;;　</span><br><span class="line">    mod.f2=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        privateAddTopic(data);</span><br><span class="line">    &#125;;　　　</span><br><span class="line">　　<span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.moduleTest || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">moduleTest.init();</span><br><span class="line">moduleTest.f2(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//张三</span></span><br><span class="line">moduleTest.name = <span class="string">'李四'</span>;     <span class="comment">//修改模块中的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//李四</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-CommonJS-AMD-CMD"><a href="#1-2-CommonJS-AMD-CMD" class="headerlink" title="1.2 CommonJS/AMD/CMD"></a>1.2 CommonJS/AMD/CMD</h3><p>现代模块的基本思想实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModules = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> modules = &#123;&#125;; <span class="comment">//定义的模块保存在这个对象里面</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name, deps, impl</span>) </span>&#123;<span class="comment">//impl是implement的简写，实现的方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class="line">                deps[i] = modules[deps[i]]; <span class="comment">//从保存的对象中获取依赖的模块,注：依赖的模块，肯定已经被define()存放在modules对象中了。</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            modules[name] = impl.apply(impl, deps);<span class="comment">//如果此时的模块引入别的模块deps，就将deps作为impl实现的方法的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * [get 通过名字获得模块]</span><br><span class="line">         * @param  &#123;[type]&#125; name [模块名]</span><br><span class="line">         * @return &#123;[type]&#125;      [完整独立模块]</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> modules[name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            define: define,</span><br><span class="line">            get: get</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    myModules.define(<span class="string">"bar"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello "</span> + who;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hello: hello</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    myModules.define(<span class="string">"foo"</span>, [<span class="string">"bar"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="string">'张三'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bar.hello(n).toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            awe: awe</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bar = myModules.get(<span class="string">"bar"</span>);</span><br><span class="line">    <span class="keyword">var</span> foo = myModules.get(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">    foo.awe();<span class="comment">//HELLO 张三</span></span><br></pre></td></tr></table></figure>
<p><strong> 1) CommonJS</strong><br>node.js的<a href="http://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="external">模块系统</a>，就是参照<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="external">CommonJS</a>规范实现的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p>
<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。这就催生AMD规范到来的背景。</p>
<p><strong> 2) AMD</strong><br><strong>AMD</strong>(Asynchronous Module Definition)是异步模块加载的意思，会预执行(依赖)模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">　　math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/" target="_blank" rel="external">require.js</a>和<a href="https://github.com/cujojs/curl" target="_blank" rel="external">curl.js</a></p>
<p><strong> 3) CMD</strong><br>CMD(Custom Module Definition)通用模块加载，SeaJS遵循CMD规范，并行加载所有依赖的模块， 但不会立即执行模块，等到真正需要(require)的时候才开始解析（懒执行）。<br><strong>引入SeaJS文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>SeaJS 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外可以使用seajs-text加载html文件或者tpl片段，seajs-css加载css文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-text.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">define(<span class="string">"main"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// You can require `.tpl` file directly</span></span><br><span class="line"> <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">"./data.tpl"</span>)</span><br><span class="line"><span class="comment">//或者html</span></span><br><span class="line"><span class="keyword">var</span> html =<span class="built_in">require</span>(<span class="string">"./a.html"</span>);</span><br><span class="line">$(<span class="string">'.some_class'</span>).append(html);</span><br><span class="line">&#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>seajs-css<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-css.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line"><span class="comment">// seajs can load css file after loading css plugin.</span></span><br><span class="line">seajs.use(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"><span class="comment">//很多时候可以使用require的方式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-ES6时代"><a href="#2-ES6时代" class="headerlink" title="2 ES6时代"></a>2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a> </li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="https://github.com/seajs" target="_blank" rel="external">seajs-github</a></li>
<li><a href="http://seajs.org/docs/" target="_blank" rel="external">seajs官网</a></li>
<li><a href="https://github.com/seajs/seajs-text/issues/1" target="_blank" rel="external">seajs-text</a></li>
<li>《你不知到的javascipt》</li>
<li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰-es6入门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[this指针总结]]></title>
      <url>http://yoursite.com/2016/08/04/this/</url>
      <content type="html"><![CDATA[<p>文章只是简单列举了方式和一些会改变this指针的情况     </p>
<h1 id="1-探寻之，必昭然若揭"><a href="#1-探寻之，必昭然若揭" class="headerlink" title="1.探寻之，必昭然若揭"></a>1.探寻之，必昭然若揭</h1><ol>
<li>new绑定            this–&gt;新创建的对象<br><code>var bar = new foo()</code>   </li>
<li>call/bind 硬绑定      this–&gt;指定的对象<br> <code>var bar = foo.call(obj2)</code>   </li>
<li>隐式绑定       this–&gt;上下文对象<br> <code>var bar = obj1.foo()</code>   </li>
<li>默认绑定       this–&gt;全局对象window    </li>
</ol>
<p>四种情况也是按照优先级排列的    </p>
<h1 id="2-实践之，定了然于胸"><a href="#2-实践之，定了然于胸" class="headerlink" title="2.实践之，定了然于胸"></a>2.实践之，定了然于胸</h1><h2 id="2-1-回掉函数会改变this指针"><a href="#2-1-回掉函数会改变this指针" class="headerlink" title="2.1 回掉函数会改变this指针"></a>2.1 回掉函数会改变this指针</h2><p>  绑定<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbTools.queryUsrDB2Datas(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    usrResDiv.fyDiv.apply(usrResDiv,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分"><a href="#2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分" class="headerlink" title="2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)"></a>2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)</h2><h2 id="2-3-绑定的例外"><a href="#2-3-绑定的例外" class="headerlink" title="2.3 绑定的例外"></a>2.3 绑定的例外</h2><ul>
<li><p><code>foo.call(null)</code> 使用<code>null</code>或者<code>undefined</code>,忽略传入对象的<code>this</code>,实际运用的是默认绑定，这也是这样方法的弊端，this指向<code>window</code>。<br>修改<code>var DMZ = Object.create(null); foo.apply(DMZ,[2,3]);</code></p>
</li>
<li><p>间接引用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;a:<span class="number">3</span>,foo:foo&#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123;a:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">o.foo();<span class="comment">//3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">//2 this--&gt;window</span></span><br><span class="line">p.foo();  <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<p><code>p.foo = o.foo</code>返回值是目标函数的引用，因此调用位置是foo(),而不是<code>p.foo()</code>,<code>o.foo()</code>;</p>
<h1 id="3-避免之，需谨小事微"><a href="#3-避免之，需谨小事微" class="headerlink" title="3.避免之，需谨小事微"></a>3.避免之，需谨小事微</h1><p>除了第一部分的方法外，还有一些常用的方法。</p>
<h2 id="3-1-ES5中我们经常会使用self-this，如："><a href="#3-1-ES5中我们经常会使用self-this，如：" class="headerlink" title="3.1 ES5中我们经常会使用self = this，如："></a>3.1 ES5中我们经常会使用<code>self = this</code>，如：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(self.a);</span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-ES6中的箭头函数-this词法"><a href="#3-2-ES6中的箭头函数-this词法" class="headerlink" title="3.2 ES6中的箭头函数(this词法)"></a>3.2 ES6中的箭头函数(this词法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//this继承来自foo()</span></span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript面向对象和面向委托]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p>昨天看了一本书《你不知道的javascript(上)》关于这方面的内容，体会颇深，其中书中讲到的把javascript当作是面向委托的语言比面向对象的解释更加贴切，下面我就简单结合自己的理解，书写阐述一下，也可以作为一种笔记记录。     </p>
<h3 id="1-提取精华——几个重要的方法"><a href="#1-提取精华——几个重要的方法" class="headerlink" title="1. 提取精华——几个重要的方法"></a>1. 提取精华——几个重要的方法</h3><h4 id="1-1-原型链关联"><a href="#1-1-原型链关联" class="headerlink" title="1.1 原型链关联"></a>1.1 原型链关联</h4><ul>
<li>Bar.prototype = Foo.prototype;</li>
<li>Bar.prototype = new Foo();</li>
<li>Bar.prototype = Object.create(Foo.prototype);<br>第一种方式，没有创建Bar.prototype的新对象Bar.prototype直接引用了Foo.prototype，修改Bar.prototype会影响Foo.prototype<br>第二种方式，创建了一个关联Bar.prototype的新对象，new其实是调用Foo的“构造函数”，有些东西会影响到Bar()的后代。<br>第三种方式，Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法：<code>Object.create(proto, [ propertiesObject ])</code><br>参数:proto 一个对象，作为新创建对象的原型。<br>   propertiesObject 可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN</a>  </p>
</blockquote>
</li>
</ul>
<p>ES5之前Object.create Polyfill代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create)&#123;</span><br><span class="line">	<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">		F.prototype = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> F();  <span class="comment">//new的作用参见上述 第二种方式</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ES5:<code>Object.setPrototypeOf(Bar.prototype,Foo.prototype)</code>更加标准可靠</p>
<h4 id="1-2-ES6-class"><a href="#1-2-ES6-class" class="headerlink" title="1.2 ES6 class"></a>1.2 ES6 class</h4><p>内部也是通过原型链实现的，只是一种语法糖。</p>
<h3 id="2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO"><a href="#2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO" class="headerlink" title="2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)"></a>2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)</h3><ul>
<li><p>OO：类的继承是复制行为，简单说关系是父子关系<br>OLOO： 只是对象的关联(基于原型/原型链)，简单说关系是兄弟关系，互相关联。</p>
</li>
<li><p>代码  </p>
</li>
</ul>
<p>OO风格：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"I am "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	Foo.call(<span class="keyword">this</span>,who);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line"></span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">"hello,"</span>+<span class="keyword">this</span>.identity()+<span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure>
<p>OLOO风格：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Foo = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    identity: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bar = <span class="built_in">Object</span>.create(Foo);</span><br><span class="line">Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello,"</span> + <span class="keyword">this</span>.identity() + <span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b1.init(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b2.init(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure></p>
<h3 id="3-问题探究"><a href="#3-问题探究" class="headerlink" title="3.问题探究"></a>3.问题探究</h3><p><strong>内省：</strong>我们想看Foo和Bar之间的关系<br>OO:对比的是Bar.prototype与Foo的关系，并不是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Bar.prototype <span class="keyword">instanceof</span> Foo);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar.prototype) === Foo.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.isPrototypeOf(Bar.prototype));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>OLOO:是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar) === Foo);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.isPrototypeOf(Bar));</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/06/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
