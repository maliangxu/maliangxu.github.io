<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[后台php实现数据实时抓取]]></title>
      <url>http://yoursite.com/2016/08/13/%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/</url>
      <content type="html"><![CDATA[<h1 id="1、设置参数"><a href="#1、设置参数" class="headerlink" title="1、设置参数"></a>1、设置参数</h1><p>date_default_timezone_set(“Asia/Shanghai”); //使得程序能够定时运行；<br>ignore_user_abort();  //即使Client断开(如关掉浏览器)，PHP脚本也可以继续执行；<br>set_time_limit(0);  //执行时间为无限制，php默认执行时间是30秒，可以让程序无限制的执行下去；<br>$interval=60*60;  // 每隔一小时运行一次</p>
<h1 id="2、定时数据抓取"><a href="#2、定时数据抓取" class="headerlink" title="2、定时数据抓取"></a>2、定时数据抓取</h1><p>在无限循环语句中，首先利用函数从url获取数据,然后将数据插入到数据库中（本文选用mysql数据库），最后使用sleep()函数设置等待一段时间后再进入下一次循环。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**********利用函数从url获取数据***************/</span></span><br><span class="line">    $json = GetCurl(<span class="string">"http://www.pm25.in/api/querys/&lt;all_cities class="</span>  <span class="string">"&gt;&lt;/all_cities&gt;json?token=jzxqS2qpsYU3bRhkEjey"</span>); <span class="comment">//json数据文件</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**********把上述数据插入数据库****************/</span></span><br><span class="line">    $con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">""</span>);<span class="comment">//连接数据库</span></span><br><span class="line">    set_time_limit(<span class="number">0</span>);<span class="comment">//设置永远不超时</span></span><br><span class="line">    mysql_select_db(<span class="string">"airquality_db"</span>,$con);<span class="comment">//选择数据库</span></span><br><span class="line">    ···</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**********按设置的时间等待一小时循环执行****************/</span></span><br><span class="line">    sleep($interval);  </span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>从url中获取数据的函数如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetCurl</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">        set_time_limit(<span class="number">0</span>);<span class="comment">//设置永远不超时</span></span><br><span class="line">        $curl = curl_init();</span><br><span class="line">        curl_setopt($curl,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);<span class="comment">//获取url数据作为变量存储，设置为1或true</span></span><br><span class="line">        curl_setopt($curl,CURLOPT_URL, $url);</span><br><span class="line">        <span class="comment">//模拟用户使用的浏览器，在HTTP请求中包含一个"user-agent"头的字符串。</span></span><br><span class="line">        curl_setopt($curl,CURLOPT_USERAGENT, $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line">        $resp = curl_exec($curl);<span class="comment">//运行curl，请求网页</span></span><br><span class="line">        $json = json_decode($resp,<span class="literal">true</span>);</span><br><span class="line">        curl_close($curl);<span class="comment">//关闭curl请求</span></span><br><span class="line">        <span class="keyword">return</span> $json;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="3、数据抓取的网站"><a href="#3、数据抓取的网站" class="headerlink" title="3、数据抓取的网站"></a>3、数据抓取的网站</h1><h2 id="空气质量"><a href="#空气质量" class="headerlink" title="空气质量"></a>空气质量</h2><p><a href="http://www.pm25.in/api/querys/all_cities.json?token=jzxqS2qpsYU3bRhkEjey" target="_blank" rel="external">http://www.pm25.in/api/querys/all_cities.json?token=jzxqS2qpsYU3bRhkEjey</a></p>
<h2 id="气象"><a href="#气象" class="headerlink" title="气象"></a>气象</h2><p><a href="http://api.openweathermap.org/data/2.5/group?id=1796236,1799397,1808926,1799962,1790645&amp;units=metric&amp;APPID=94506fa9256f37bd13eae4126beb7d8d&amp;lang=zh_cn" target="_blank" rel="external">http://api.openweathermap.org/data/2.5/group?id=1796236,1799397,1808926,1799962,1790645&amp;units=metric&amp;APPID=94506fa9256f37bd13eae4126beb7d8d&amp;lang=zh_cn</a><br>Id代表城市，APPID代表密钥，lang代表语言。<br>更新时间好像是我自己测的，我让它每隔半小时获取一次，然后看到数据大约是一小时一次。</p>
<h1 id="4、存在问题"><a href="#4、存在问题" class="headerlink" title="4、存在问题"></a>4、存在问题</h1><p>数据抓取过程中发生断开连接现象(即循环过程中断)，需要重新运行PHP文件进行抓取。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Polymer介绍]]></title>
      <url>http://yoursite.com/2016/08/13/Polymer%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="1-Polymer简介"><a href="#1-Polymer简介" class="headerlink" title="1 Polymer简介"></a>1 Polymer简介</h1><p>Polymer(聚合物，设计理念：材料学设计规范)<br>Polymer是google开发的web components方式的前端UI控件库</p>
<p><strong>历史</strong><br>2013年google I/O大会发布0.5开发者预览版<br>2015年 google I/O大会发布1.0版本<br>目前已更新到1.2.3版本</p>
<p><strong>web components 是什么？</strong><br>web组件就是web的一个一个元素标签， 如input标签，img标签，video标签等等。 web componts的概念就是把所有可重用的东西封装成元素组件， 下次要用，自己使用自己写好的标签即可。 </p>
<p>polymer给大家提供了封装自定义标签的方法，它自己也有很多已经封装的标签<br>polymer的理念是一切功能皆元素， 即使是ajax， 也是元素，core-ajax标签可以发起ajax请求， 文档地址：<a href="http://www.polymer-project.org/docs/elements/core-elements.html#core-ajax" target="_blank" rel="external">http://www.polymer-project.org/docs/elements/core-elements.html#core-ajax</a><br>polymer已经有了一个组件库，里面有很多已经封装好的组件。</p>
<h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2 快速实践"></a>2 快速实践</h1><h3 id="新建newTag-html文件"><a href="#新建newTag-html文件" class="headerlink" title="新建newTag.html文件"></a>新建newTag.html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"polymer/polymer.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dom-module</span> <span class="attr">id</span>=<span class="string">"element-name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><br><span class="line">      /* 组件元素CSS样式 */</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!—该组件的本地DOM--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">on-click</span>=<span class="string">”handleClick”</span>&gt;</span>&#123;&#123;greeting&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">!—在本地DOM上绑定数据--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dom-module</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="comment">// 注册元素</span></span><br><span class="line">Polymer(&#123;</span><br><span class="line">  is: <span class="string">"element-name"</span>,<span class="comment">//自定义元素的名称必选用连接符</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给元素添加属性和方法</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    <span class="comment">// 为元素声明公共api</span></span><br><span class="line">    greeting: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">"Hello!"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/*事件逻辑*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p>1、如果使用该组件，则在html文件中导入即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"import"</span> <span class="attr">href</span>=<span class="string">"newTag.html"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、声明周期的回调函数</p>
<ul>
<li>ceated</li>
<li>attached</li>
<li>detached</li>
<li>attributeChanged</li>
</ul>
<p>3、本地DOM的初始化顺序</p>
<ul>
<li>created callback</li>
<li>local DOM initialized</li>
<li>ready callback</li>
<li>factoryImpl callback</li>
<li>attached callback</li>
</ul>
<p>4、通过dom-module定义一个本地DOM，及自定义标签，该标签的id为该自定义标签的名称<code>&lt;dom-module id=&quot;element-name&quot;&gt;</code>，名称必须用-连字符。<br>5、在<code>&lt;dom-module&gt;</code>中放置<code>&lt;template&gt;</code>，polymer将会自动克隆template标签中的内容到自定义标签中（即本地DOM）。<br>6、Polymer({ })实现组件。<br>7、可以在组件中定义样式，通过在template内定义style实现。<br>8、事件监听 on-eventname 和addEventlistener的区别。</p>
<ul>
<li><p>polymer提供了on-eventname属性来对事件进行监听， 如监听按钮的点击事件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paper-button</span> <span class="attr">id</span>=<span class="string">"button"</span> <span class="attr">label</span>=<span class="string">"flat button"</span> <span class="attr">on-click</span>=<span class="string">"&#123;&#123;buttonClick&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">paper-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>另外还可以用addEventlistener监听事件，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">this</span>.$.button.addEventlistener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'click'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在两种监听方法是有区别的。  </p>
<ul>
<li>on-eventname 方式监听， 在监听函数中 this 指向的是当前polymer对象。可以用this来获得当前polymer对象的其他属性。</li>
<li>而addEventlistener 在监听函数中 this 是当前元素。</li>
</ul>
<h1 id="3-拓展–标准HTML-5组件实现API"><a href="#3-拓展–标准HTML-5组件实现API" class="headerlink" title="3 拓展–标准HTML 5组件实现API"></a>3 拓展–标准HTML 5组件实现API</h1><p>•   Shadow DOM：Shadow DOM API 支持您将元素添加到通过常用方法（比如document.getElementById()）无法访问的 DOM 树。Shadow DOM 中的元素隐藏在暗处；它们对 DOM 树其他部分实际上是不可见的，在默认情况下，它们不受周围文档中的 CSS 的影响。<br>•   模板：HTML5 模板是一个惰性文档片段。当您需要显示这些片段时，可以 创建该模板，让片段出现在 DOM 树中。这些模板允许您封装那些您可以创建和定制的 HTML、JavaScript 和 CSS。（相当于polymer中的template）<br>•   定制元素定制元素是组件的标签。定制组件的标签必须包含一个连字符（例如 <custom-tag>），除此之外，它们与内置 HTML 标签没什么区别。<br>•   HTML 导入：HTML 导入允许您从一个 HTML 文件中导入另一个，这使得您可以在其自身文件中实现定制组件。</custom-tag></p>
<p>这些 API 目前仍正开发中。撰写文本之时，还没有浏览器支持所有这些 API。因此，如果现在开始实现 HTML5 标准组件，那么可以从 Polymer 和 X-Tags 这两个开源项目中进行选择，它们提供了缺失的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[热力图实现原理]]></title>
      <url>http://yoursite.com/2016/08/13/%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.piimg.com/567571/b2fbd101d3f5b5bd.jpg" alt=""></p>
<h1 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1 使用方法"></a>1 使用方法</h1><p>1）实例化一个热力图图层，传入图层ID号，并将其添加到地图上：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heatmapLayer = <span class="keyword">new</span> gEcnu.Layer.Heatmap(<span class="string">'heatmapLayer'</span>);</span><br><span class="line">map.addLayer(heatmapLayer);</span><br></pre></td></tr></table></figure></p>
<p>2）为热力图添加数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123;</span><br><span class="line">    x: worldPoint.x, <span class="comment">//点的x坐标</span></span><br><span class="line">    y: worldPoint.y, <span class="comment">//点的y坐标</span></span><br><span class="line">    value: val,      <span class="comment">//数值大小，最后表现为该点的颜色值</span></span><br><span class="line">    radius: radius   <span class="comment">//该点的半径大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123; </span><br><span class="line">    max: max,  <span class="comment">//数据中的最大值</span></span><br><span class="line">    data: [point,point,point...]  <span class="comment">//其中point为每一个数据点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.heatmapLayer.setData(data);</span><br></pre></td></tr></table></figure></p>
<h1 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h1><p>利用 HTML5 提供的 Canvas API的createRadialGradient方法对每个点绘制出渐变圆形，再使用drawImage方法绘制到一个画布上；创建一个宽为256px,高为1px的矩形，利用createLinearGradient方法对其进行填色；<br><img src="http://i1.piimg.com/567571/a257fb493cca451d.png" alt=""><br>最后根据画布上每个点的透明度判读该点使用的颜色，透明度的值越大，颜色越红，值越小，颜色越蓝。</p>
<h1 id="3-热力图的实现"><a href="#3-热力图的实现" class="headerlink" title="3 热力图的实现"></a>3 热力图的实现</h1><h2 id="3-1-插件形式的写法"><a href="#3-1-插件形式的写法" class="headerlink" title="3.1 插件形式的写法"></a>3.1 插件形式的写法</h2><h3 id="3-1-1-支持模块化环境"><a href="#3-1-1-支持模块化环境" class="headerlink" title="3.1.1 支持模块化环境"></a>3.1.1 支持模块化环境</h3><p>通过写成自执行匿名函数的形式，并将变量名、作用域以及函数主体以参数的形式传入。判读当前处于什么模式，如果符合CMD规范，就使用module.exports的形式导出；如果符合AMD规范，就使用define()的形式导出；若都不满足，则在传入的作用域中添加一个以传入的变量名为键名的属性，值为传入的函数体的执行结果。</p>
<h3 id="3-1-2-闭包的写法"><a href="#3-1-2-闭包的写法" class="headerlink" title="3.1.2 闭包的写法"></a>3.1.2 闭包的写法</h3><p>将不必对外暴露的函数和变量放在闭包中，转变为私有变量。通过这种方式，外部无法改变私有变量的值，保证变量不会被篡改。</p>
<h3 id="3-1-3-在文件开头加上分号"><a href="#3-1-3-在文件开头加上分号" class="headerlink" title="3.1.3 在文件开头加上分号"></a>3.1.3 在文件开头加上分号</h3><p>保证文件在被合并压缩时不会发生错误。因为文件的开头就是一对括号，在文件合并时，若上一个文件的最后是一个函数，就会产生直接执行该函数的结果，导致意想不到的错误，因此在文件的最开头初加上分号，防止错误的发生。<br><img src="http://i1.piimg.com/567571/1220aa985f356fc1.png" alt=""></p>
<h2 id="3-2-数据管理"><a href="#3-2-数据管理" class="headerlink" title="3.2 数据管理"></a>3.2 数据管理</h2><h3 id="3-2-1-数据存储"><a href="#3-2-1-数据存储" class="headerlink" title="3.2.1 数据存储"></a>3.2.1 数据存储</h3><p>改变传入数据的形式，将每个点的值value和半径radius都保存在一个二维数组中，第一维为点的x左边，第二维为点的y坐标，这样便于比较传入的数据与已经存储的数据，若传入的数据点中有点的x坐标和y坐标都相同的情况，则将该点的值累加。</p>
<h3 id="3-2-2-追加数据"><a href="#3-2-2-追加数据" class="headerlink" title="3.2.2 追加数据"></a>3.2.2 追加数据</h3><p>可以向Store中追加数据，若数据点不止一个，而是以数组的形式传入，则递归处理数据。若传入数据的值小于原来数据的最大值，则在Canvas中追加绘制该点的图形；反之若大于最大值，则需要重新绘制整个Canvas的内容。</p>
<h2 id="3-3-数据渲染"><a href="#3-3-数据渲染" class="headerlink" title="3.3 数据渲染"></a>3.3 数据渲染</h2><h3 id="3-3-1-预渲染"><a href="#3-3-1-预渲染" class="headerlink" title="3.3.1 预渲染"></a>3.3.1 预渲染</h3><p>由于数据量较大，将每个点绘制到画布时会导致频繁的重绘，因此考虑使用一个与目标Canvas画布同等大小且不可见的画布。由于离屏Canvas是不可见的，在DOM解析时，并不会对其进行渲染，只有将其再绘制到可见的目标画布上，才会解析样式进行渲染，因此绘制每一个点时都将其绘制到离屏画布中。</p>
<h3 id="3-3-2-绘制每个数据点的黑白渐变圆"><a href="#3-3-2-绘制每个数据点的黑白渐变圆" class="headerlink" title="3.3.2 绘制每个数据点的黑白渐变圆"></a>3.3.2 绘制每个数据点的黑白渐变圆</h3><p>创建一个临时的Canvas 画布，画布的宽和高都设置为半径值的2倍。根据数据点的半径值，以及模糊数，绘制一个矩形，矩形的大小等于画布的大小。并利用Canvas API的createRadialGradient方法绘制渐变圆，设置渐变圆的起点颜色为黑色，终点颜色为白色，对矩形进行填充，填充的结果如图所示。对于不同的模糊数，生成的渐变圆效果有所不同，如图左边的渐变圆模糊数blur为0.15，左边的渐变圆模糊数blur为0.8，在系统中我们将其设置为0.15。<br><img src="http://i4.piimg.com/567571/56ba43b2761a9966.jpg" alt="">       </p>
<p>根据每个点的value在最小值与最大值之间的百分比，设置预渲染画布的透明度，并使用drawImage方法将每一个点的数据绘制到预渲染画布中，最后得到如下的效果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shadowCtx.globalAlpha = (value-min)/(max-min);</span><br><span class="line">shadowCtx.drawImage(tpl, rectX, rectY);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://i4.piimg.com/567571/1f7cea12f9002334.png" alt=""></p>
<h3 id="3-3-3-创建颜色模板"><a href="#3-3-3-创建颜色模板" class="headerlink" title="3.3.3 创建颜色模板"></a>3.3.3 创建颜色模板</h3><p>在一个临时的Canvas 画布中，将画布的宽设置为256px,高设置为1px，同时绘制一个同等大小的矩形，利用createLinearGradient方法创建一条线性颜色渐变对其进行填色，使用Canvas API的getImageData方法得到ImageData对象，该对象的data属性中存放着每个点的R（红色）G（绿色）B（蓝色）A（透明度）信息，因此我们得到的data的长度为256*4=1024，每四个元素对应一个点的信息。如图前四个元素对应第一个蓝色像素点的信息。<br><img src="http://i1.piimg.com/567571/a257fb493cca451d.png" alt=""></p>
<h3 id="3-3-4-着色"><a href="#3-3-4-着色" class="headerlink" title="3.3.4 着色"></a>3.3.4 着色</h3><p>对预渲染画布着色，并将其绘制到可见Canvas画布中。同样使用getImageData方法得到预渲染画布的ImageData对象，取得data属性中每隔4个元素的值，即每个点的透明度。依据该值，以及颜色模板，对该点着色，若该点的值为0则赋为第一个点的颜色蓝色，若该点的值为255，则赋为最后一个点的颜色红色。将该点的RGBA属性设置为对应颜色的RGBA属性。<br>修改完成后，使用Canvas API的putImageData方法，将预渲染画布中的内容绘制到可见画布上。<br><img src="http://i4.piimg.com/567571/7d289451dae4bac4.png" alt=""></p>
<h1 id="4-与ccgis平台的对接"><a href="#4-与ccgis平台的对接" class="headerlink" title="4 与ccgis平台的对接"></a>4 与ccgis平台的对接</h1><h2 id="4-1-热力图层"><a href="#4-1-热力图层" class="headerlink" title="4.1 热力图层"></a>4.1 热力图层</h2><p>构造热力图层，继承自要素图层，初始化时将该图层的oClass属性设置为heatmapLayer<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gEcnu.Layer.Heatmap = gEcnu.Layer.Feature.extend();</span><br></pre></td></tr></table></figure></p>
<p>当将其添加到地图时，使用gHeatmap.create创建热力图。添加数据时，先对数据进行预处理，将传入的世界坐标转为屏幕坐标。缩放地图时，每一个数据点的半径也要相应缩放，因此对半径乘以缩放系数。<br>传入要素集时，首先取得视窗范围内的要素，并将每个要素的坐标转换为屏幕坐标，最后使用setData方法添加到图层中。</p>
<h1 id="5-改进计划"><a href="#5-改进计划" class="headerlink" title="5 改进计划"></a>5 改进计划</h1><p>目前使用随机数作为模拟数据，进一步可以考虑应用到真实数据中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React简介与应用实践]]></title>
      <url>http://yoursite.com/2016/08/13/React%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1.React简介"></a>1.React简介</h1><ul>
<li>仅仅是UI<br>许多人使用React作为MVC架构的V层。 尽管React并没有假设过你的其余技术栈， 但它仍可以作为一个小特征轻易地在已有项目中使用。</li>
<li>虚拟DOM<br>React为了更高超的性能而使用虚拟DOM作为其不同的实现。 它同时也可以由服务端Node.js渲染 － 而不需要过重的浏览器DOM支持。<br>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，组件的HTML结构并不会直接生成DOM，而是映射生成虚拟的JavaScript DOM结构，React又通过在这个虚拟DOM上实现了一个 diff 算法找出最小变更，再把这些变更写入实际的DOM中。这个虚拟DOM以JS结构的形式存在，计算性能会比较好，而且由于减少了实际DOM操作次数，性能会有较大提升。</li>
<li>数据流<br>React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。<br>React中文文档链接<a href="http://reactjs.cn/react/index.html" target="_blank" rel="external">http://reactjs.cn/react/index.html</a></li>
</ul>
<h1 id="2-为什么使用React"><a href="#2-为什么使用React" class="headerlink" title="2.为什么使用React"></a>2.为什么使用React<br></h1><p>React是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。很多人认为 React 是 MVC 中的 V（视图）。我们创造 React 是为了解决一个问题：<strong>构建随着时间数据不断变化的大规模应用程序。</strong>为了达到这个目标，React 采用下面两个主要的思想。</p>
<ul>
<li>简单<br>仅仅只要表达出你的应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</li>
<li>声明式<br>数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。</li>
</ul>
<h1 id="3-数据呈现"><a href="#3-数据呈现" class="headerlink" title="3.数据呈现"></a>3.数据呈现</h1><p>用户界面能做的最基础的事就是呈现一些数据。React 让显示数据变得简单，当数据变化时，用户界面会自动同步更新。</p>
<p><strong>快速开始</strong></p>
<p>新建一个名为 hello-react.html 的文件，内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://fb.me/react-0.14.7.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://fb.me/JSXTransformer-0.14.7.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span><span class="xml"></span><br><span class="line">    var HelloWorld = React.createClass(&#123;</span><br><span class="line">      render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Hello,<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Your name here"</span> /&gt;</span>!</span><br><span class="line">            It is &#123;this.props.date.toTimeString()&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    setInterval(function() &#123;</span><br><span class="line">      React.render(</span><br><span class="line">        <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">date</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()&#125; /&gt;</span>,</span><br><span class="line">        document.getElementById('example')</span><br><span class="line">      );</span><br><span class="line">    &#125;, 500);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意事项</strong></p>
<ul>
<li>ReactJs是基于组件化的开发，所以最终你的页面应该是由若干个小组件组成的大组件。</li>
<li>可以通过属性，将值传递到组件内部，同理也可以通过属性将内部的结果传递到父级组件；要对某些值的变化做DOM操作的，要把这些值放到state中。</li>
<li><p>为组件添加外部css样式时，类名应该写成className而不是class;添加内部样式时</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">style=&#123;&#123;opacity: <span class="keyword">this</span>.state.opacity&#125;&#125;; <span class="comment">//正确</span></span><br><span class="line">style=<span class="string">"opacity:&#123;this.state.opacity&#125;;"</span>  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件名称首字母必须大写。</p>
</li>
<li>变量名用<code>{}</code>包裹，且不能加双引号。</li>
</ul>
<p><strong>响应式更新(Reactive Updates)</strong></p>
<p>在浏览器中打开 hello-react.html ，在输入框输入你的名字。你会发现 React 在用户界面中只改变了时间，你在输入框的输入内容会保留着，即使你没有写任何代码来完成这个功能。React 也为你解决了这个问题，做了正确的事。</p>
<p>我们想到的解决方案是React 是不会去操作 DOM 的，除非不得不操作 DOM 。它用一种更快的内置仿造的 DOM 来操作差异，为你计算出效率最高的 DOM 改变。</p>
<p>这个组件的输入被称为 props - “properties”的缩写。它们通过 JSX 语法进行参数传递。你必须知道，在组件里这些属性是不可直接改变的，也就是说 this.props 是只读的。</p>
<p><strong>组件就像是函数</strong></p>
<p>React 组件非常简单。你可以认为它们就是简单的函数，接受 props 和 state 作为参数，然后渲染出 HTML。正是由于它们如此简单，使得它们非常容易理解。</p>
<h1 id="4-富交互性的动态用户界面"><a href="#4-富交互性的动态用户界面" class="headerlink" title="4.富交互性的动态用户界面"></a>4.富交互性的动态用户界面</h1><p><strong>简单例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;liked: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;liked: !<span class="keyword">this</span>.state.liked&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked? <span class="string">'like'</span>: <span class="string">'haven\'t liked'</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span><br><span class="line">        You &#123;text&#125; this. Click to toggle.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">React.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span><br><span class="line">  document.getElementById('example')</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<p><strong>事件处理与合成事件(Synthetic Events)</strong></p>
<p>React 里只需把事件处理器（event handler）以骆峰命名（camelCased）形式当作组件的 props 传入即可，就像使用普通 HTML 那样。React 内部创建一套合成事件系统来使所有事件在 IE8 和以上浏览器表现一致。也就是说，React 知道如何冒泡和捕获事件，而且你的事件处理器接收到的 events 参数与 W3C 规范一致，无论你使用哪种浏览器。</p>
<p>如果需要在手机或平板等触摸设备上使用 React，需要调用React.initializeTouchEvents(true); 启用触摸事件处理。</p>
<p><strong>幕后原理</strong></p>
<p>在幕后，React 做了一些操作来让代码高效运行且易于理解。</p>
<p><strong>Autobinding:</strong> 在 JavaScript 里创建回调的时候，为了保证 this 的正确性，一般都需要显式地绑定方法到它的实例上。有了 React，所有方法被自动绑定到了它的组件实例上。React 还缓存这些绑定方法，所以 CPU 和内存都是非常高效。而且还能减少打字！</p>
<p><strong>事件代理 ：</strong> React 实际并没有把事件处理器绑定到节点本身。当 React 启动的时候，它在最外层使用唯一一个事件监听器处理所有事件。当组件被加载和卸载时，只是在内部映射里添加或删除事件处理器。当事件触发，React 根据映射来决定如何分发。当映射里处理器时，会当作空操作处理。</p>
<p><strong>组件其实是状态机(State Machines)</strong><br>React 把用户界面当作简单状态机。把用户界面想象成拥有不同状态然后渲染这些状态，可以轻松让用户界面和数据保持一致。</p>
<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。React 来决定如何最高效地更新 DOM。</p>
<p><strong>State工作原理</strong></p>
<p>常用的通知 React 数据变化的方法是调用 setState(data, callback)。这个方法会合并（merge） data 到 this.state，并重新渲染组件。渲染完成后，调用可选的 callback回调。大部分情况下不需要提供 callback，因为 React 会负责把界面更新到最新状态。</p>
<h1 id="5-应用实例"><a href="#5-应用实例" class="headerlink" title="5.应用实例"></a>5.应用实例</h1><p>以安信农业保险管理系统保单列表为例：(当前农保系统框架重构工作已全部完成)<br><img src="http://i2.piimg.com/567571/c4e3dcdaad7d57d4.png" alt=""></p>
<p><strong>源码分析</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">   <span class="keyword">let</span> handler4policy = &#123;</span><br><span class="line">       handlerArrow: <span class="keyword">this</span>.handlerArrow.bind(<span class="keyword">this</span>),</span><br><span class="line">       handler4bd: &#123;</span><br><span class="line">           handlerFolder: <span class="keyword">this</span>.handlerFolder.bind(<span class="keyword">this</span>),</span><br><span class="line">           handler4land: &#123;</span><br><span class="line">               deleteLand: <span class="keyword">this</span>.deleteLand.bind(<span class="keyword">this</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">       &lt;div className="item-wrap" style=&#123;this.props.css&#125;&gt;</span><br><span class="line">           &lt;div className="item-search-wrap"&gt;</span><br><span class="line">               &lt;input type="text" className='item-search-input' ref='search' value=&#123;this.state.search&#125; placeholder="编号/证件号/姓名/电话" onChange=&#123;this.handlerInputChange.bind(this)&#125; onKeyDown=&#123;this.handlerKeyDown.bind(this)&#125;/&gt;</span><br><span class="line">               &lt;div className="item-search-btn" onClick=&#123;this.searchItem.bind(this)&#125;&gt;</span><br><span class="line">                   &lt;img className="item-search-logo" src="img/search.png" /&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div className="policy-add-btn" title="新建保单" onClick=&#123;this.handlerNewPolicy.bind(this)&#125;&gt;</span><br><span class="line">               &lt;img className="item-insert-logo" src="img/add_2.png" /&gt;</span><br><span class="line">               &lt;span className="item-insert-txt"&gt;新建保单&lt;/span&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">           &lt;div className="item-contain"&gt;</span><br><span class="line">               &lt;ul className = "item-ul"&gt;</span><br><span class="line">                   &#123;this.state.items.map((item, idx) =&gt; &#123;</span><br><span class="line">                       return (&lt;PolicyMod key = &#123;item.policy.CODING&#125; &#123;...this.config&#125; &#123;...item&#125; &#123;...handler4policy&#125; index = &#123;idx&#125; /&gt;);</span><br><span class="line">                   &#125;)&#125;</span><br><span class="line">               &lt;/ul&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>保单搜索</strong></p>
<p>通过点击保单查询图标或输入框的Enter键盘事件触发SearchItem函数接受查询信息，进而以查询信息作为关键字调用农保保单查询接口获取保单列表的JSON数据，预处理数据后通过调用React框架的setState函数更新状态机完成列表的刷新操作，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">handlerKeyDown(event) &#123;</span><br><span class="line">  <span class="keyword">let</span> [target = event.target] = [event.srcElement];</span><br><span class="line">  <span class="keyword">if</span>(event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.search(target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">searchItem(event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.search(<span class="keyword">this</span>.refs.search.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">search(val) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;search: <span class="string">''</span>&#125;);</span><br><span class="line">  connect.fuzzyQuery(val, json =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.refreshList(json);</span><br><span class="line">      <span class="keyword">if</span>(json.length &gt; <span class="number">0</span> &amp;&amp; json[<span class="number">0</span>].bdArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdxq = json[<span class="number">0</span>].bdArr[<span class="number">0</span>].bdxq;</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(bdxq[<span class="string">'X'</span>]), <span class="built_in">parseFloat</span>(bdxq[<span class="string">'Y'</span>]), &#123; <span class="string">'zl'</span>: <span class="number">1</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里this.state.items为保单列表展示所提供的数据(JSON数据格式)，一些可能改变列表内容的交互行为最终表现为改变该组件的state值(即组件的当前状态)即可达到轻松渲染页面的效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">refreshList(json, fid) &#123;</span><br><span class="line">  <span class="keyword">this</span>.pretreat(json, fid);</span><br><span class="line">  <span class="built_in">Map</span>.getVectorLandData();</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: json&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pretreat(items, fid) &#123;</span><br><span class="line">  <span class="built_in">Map</span>.curListBdArr = [];</span><br><span class="line">  <span class="built_in">Map</span>.exceptFIDArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = items[i];</span><br><span class="line">      item.isOpen = <span class="keyword">this</span>.config.defaultOpen;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; item.bdArr.length; j++) &#123;</span><br><span class="line">          <span class="keyword">let</span> bd = item.bdArr[j];</span><br><span class="line">          bd.isOpen = <span class="keyword">this</span>.config.defaultOpen;</span><br><span class="line">          <span class="built_in">Map</span>.curListBdArr.push(bd.bdxq.ID);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> z = <span class="number">0</span>; z &lt; bd.landArr.length; z++) &#123;</span><br><span class="line">              <span class="keyword">let</span> land = bd.landArr[z];</span><br><span class="line">              land.highlight = <span class="literal">false</span>;</span><br><span class="line">              <span class="keyword">if</span>(fid &amp;&amp; land.FID === fid) &#123;</span><br><span class="line">                  land.highlight = <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">let</span> cp = <span class="keyword">this</span>._calCenterPoint(land.XMIN, land.XMAX, land.YMIN, land.YMAX);</span><br><span class="line">              land.centerPoint = <span class="string">`<span class="subst">$&#123;cp.x&#125;</span>,<span class="subst">$&#123;cp.y&#125;</span>`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>保单操作</strong><br><img src="http://i2.piimg.com/567571/0ae00402bb09bd31.png" alt=""><br><img src="http://i2.piimg.com/567571/e0c1ced25847ed95.png" alt=""></p>
<p>当通过点击对话框中相应的事件完成对保单的添加、更新以及删除操作的响应时，利用获取到的事件调用列表组件的保单事件接受函数完成相应的业务操作并更新数据库，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">alterPolicy_ex(type, detail) &#123;</span><br><span class="line">  <span class="keyword">const</span> plTAB = config.policyTab;</span><br><span class="line">  <span class="keyword">this</span>._handlerDateForm(detail);</span><br><span class="line">  <span class="keyword">let</span> params = &#123;Fields: [], Data: [[]]&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(detail)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'CODING'</span>) &#123;</span><br><span class="line">          params.Fields.unshift(key);</span><br><span class="line">          params.Data[<span class="number">0</span>].unshift(detail[key]);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      params.Fields.push(key);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="string">'INSERT'</span>) &#123;</span><br><span class="line">      detail.USRID = sessionStorage.getItem(<span class="string">'usrName'</span>);</span><br><span class="line">      detail.AREA = <span class="number">0</span>;</span><br><span class="line">      params.Fields.push(<span class="string">'USRID'</span>, <span class="string">'AREA'</span>);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail.USRID, detail.AREA);</span><br><span class="line">      <span class="keyword">let</span> plJson = &#123; policy: detail, bdArr: [], isOpen: <span class="literal">true</span> &#125;;</span><br><span class="line">      <span class="keyword">this</span>.state.items.push(plJson);</span><br><span class="line">      toolUtil.recordAdd(config.dbName, plTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'添加成功'</span>);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              item.policy = detail;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordUpdate(config.dbName, plTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'保存成功'</span>);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deletePolicy_ex(coding) &#123;</span><br><span class="line">  <span class="keyword">let</span> curInsFeas = <span class="built_in">Map</span>.curWindowInsureFeas;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = curInsFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.CODING == coding) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.CODING != coding);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items = <span class="keyword">this</span>.state.items.filter(item =&gt; item.policy.CODING !== coding);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  connect.deletePolicyByCoding(coding, () =&gt; &#123;</span><br><span class="line">      toolUtil.newalertDiv(<span class="string">'删除成功'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样的，在处理不同的事件操作过程中通过改变组件的state值(这里是state.items)，添加时push一条记录、更新替换一条记录、以及删除时剔除一条记录的方式，统一更改state值，再一次调用setState函数完成保单列表的刷新工作，渲染保单。最后根据不同的需求增删改操作数据库，完成保单的操作任务。</p>
<p><strong>标的操作</strong><br><img src="http://i2.piimg.com/567571/7f1063597804f119.png" alt=""><br><img src="http://i2.piimg.com/567571/6d47149125c5fd49.png" alt=""></p>
<p>在完成对标的的添加、更新以及删除操作时，利用获取到的事件调用列表组件的标的事件接受函数完成相应的业务操作并更新数据库，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">alterBd_ex(type, detail, point) &#123;</span><br><span class="line">  <span class="keyword">const</span> bdTAB = config.bdTab;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;Fields: [], Data: [[]]&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(detail)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">'ID'</span>) &#123;</span><br><span class="line">          params.Fields.unshift(key);</span><br><span class="line">          params.Data[<span class="number">0</span>].unshift(detail[key]);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      params.Fields.push(key);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="string">'INSERT'</span>) &#123;</span><br><span class="line">      detail.AREA = <span class="number">0</span>;</span><br><span class="line">      params.Fields.push(<span class="string">'AREA'</span>);</span><br><span class="line">      params.Data[<span class="number">0</span>].push(detail.AREA);</span><br><span class="line">      <span class="keyword">let</span> bdJson = &#123; bdxq: detail, landArr: [], isOpen: <span class="literal">true</span> &#125;;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              item.bdArr.push(bdJson);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordAdd(config.dbName, bdTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'添加成功'</span>);</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(point.X), <span class="built_in">parseFloat</span>(point.Y), &#123; zl: <span class="number">1</span> &#125;);</span><br><span class="line">          <span class="keyword">let</span> SQL = &#123; <span class="string">'fields'</span>: <span class="string">'max(ID)'</span>, <span class="string">'lyr'</span>: bdTAB, <span class="string">'filter'</span>: <span class="string">''</span> &#125;;</span><br><span class="line">          toolUtil.recordQuery(config.dbName, SQL, msg =&gt; &#123;</span><br><span class="line">              bdJson.bdxq.ID = msg[<span class="number">0</span>][<span class="string">'max(ID)'</span>];</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.policy.CODING === detail.CODING) &#123;</span><br><span class="line">              <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">              bdArr.forEach(bd =&gt; &#123;</span><br><span class="line">                  <span class="keyword">if</span>(bd.bdxq.ID === detail.ID) &#123;</span><br><span class="line">                      bd.bdxq = detail;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      toolUtil.recordUpdate(config.dbName, bdTAB, params, () =&gt; &#123;</span><br><span class="line">          toolUtil.newalertDiv(<span class="string">'保存成功'</span>);</span><br><span class="line">          <span class="built_in">Map</span>.map.zoomTo(<span class="built_in">parseFloat</span>(point.X), <span class="built_in">parseFloat</span>(point.Y), &#123; zl: <span class="number">1</span> &#125;);</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同保单操作，在处理不同的事件操作过程中依然通过改变组件的state值，调用setState函数完成保单列表的刷新工作。最后根据不同的需求增删改操作数据库，完成标的的操作任务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">deleteBd_ex(coding, bdid, area) &#123;</span><br><span class="line">  <span class="keyword">let</span> curInsFeas = <span class="built_in">Map</span>.curWindowInsureFeas;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = curInsFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.BDID === bdid) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.BDID !== bdid);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach(item =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING == coding) &#123;</span><br><span class="line">          item.bdArr = item.bdArr.filter(bd =&gt; bd.bdxq.ID !== bdid);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(coding, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  connect.deleteBdById(bdid, () =&gt; &#123;</span><br><span class="line">      toolUtil.newalertDiv(<span class="string">'删除成功'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>地块操作</strong></p>
<p>1.添加地块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">insertLand_ex(selectedfea) &#123;</span><br><span class="line">  <span class="keyword">let</span> [fields, params, land = &#123;BDID: curbdid, CODING: curcoding&#125;] = [selectedfea.fields, &#123;Fields: landRelFields, Data: [[]]&#125;];</span><br><span class="line">  landRelFields.forEach((fid) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(fields[fid]) &#123;</span><br><span class="line">          land[fid] = fields[fid];</span><br><span class="line">          params.Data[<span class="number">0</span>].push(fields[fid]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          fid === <span class="string">'BDID'</span> &amp;&amp; params.Data[<span class="number">0</span>].push(curbdid);</span><br><span class="line">          fid === <span class="string">'CODING'</span> &amp;&amp; params.Data[<span class="number">0</span>].push(curcoding);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> cp = <span class="keyword">this</span>._calCenterPoint(land.XMIN, land.XMAX, land.YMIN, land.YMAX);</span><br><span class="line">  land.centerPoint = <span class="string">`<span class="subst">$&#123;cp.x&#125;</span>,<span class="subst">$&#123;cp.y&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  selectedfea.addFields(&#123;<span class="string">'BDID'</span>: curbdid, <span class="string">'CODING'</span>: curcoding&#125;);</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas.push(selectedfea);</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas.forEach(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(fea.fields.BDID == curbdid) &#123;</span><br><span class="line">          <span class="built_in">Map</span>.insure_Featurelayer.addFeature(fea);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(!toolUtil.isInArr(curbdid, <span class="built_in">Map</span>.curListBdArr)) &#123;</span><br><span class="line">      <span class="built_in">Map</span>.curListBdArr.push(curbdid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach((item) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING === curcoding) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">          bdArr.forEach((bd) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (bd.bdxq.ID === curbdid) &#123;</span><br><span class="line">                  bd.isOpen = <span class="literal">true</span>;</span><br><span class="line">                  bd.landArr.push(land);</span><br><span class="line">                  area = <span class="built_in">parseFloat</span>(land.SHPAREA) / <span class="number">666.67</span>;</span><br><span class="line">                  bd.bdxq.AREA = (<span class="built_in">parseFloat</span>(bd.bdxq.AREA) + area).toFixed(<span class="number">2</span>);</span><br><span class="line">                  connect.updateArea4Bd(bd.bdxq.ID, bd.bdxq.AREA);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) + area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(item.policy.CODING, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  toolUtil.recordAdd(config.dbName, config.landRelTab, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.删除地块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">deleteLand(fid, bdid, coding) &#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">Map</span>.curWindowInsureFeas = <span class="built_in">Map</span>.curWindowInsureFeas.filter(fea =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (fea.fields.FID === fid) <span class="built_in">Map</span>.insure_Featurelayer.removeFeature(fea);</span><br><span class="line">      <span class="keyword">return</span> (fea.fields.FID !== fid);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.state.items.forEach((item) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.policy.CODING === coding) &#123;</span><br><span class="line">          <span class="keyword">let</span> bdArr = item.bdArr;</span><br><span class="line">          bdArr.forEach((bd) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (bd.bdxq.ID === bdid) &#123;</span><br><span class="line">                  bd.landArr = bd.landArr.filter(land =&gt; &#123;</span><br><span class="line">                      <span class="keyword">if</span> (land.FID === fid) area = <span class="built_in">parseFloat</span>(land.SHPAREA) / <span class="number">666.67</span>;</span><br><span class="line">                      <span class="keyword">return</span> land.FID !== fid;</span><br><span class="line">                  &#125;);</span><br><span class="line">                  bd.bdxq.AREA = (<span class="built_in">parseFloat</span>(bd.bdxq.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">                  connect.updateArea4Bd(bd.bdxq.ID, bd.bdxq.AREA);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          item.policy.AREA = (<span class="built_in">parseFloat</span>(item.policy.AREA) - area).toFixed(<span class="number">2</span>);</span><br><span class="line">          connect.updateArea4Policy(item.policy.CODING, item.policy.AREA);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;items: <span class="keyword">this</span>.state.items&#125;);</span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">      <span class="string">'Fields'</span>: <span class="string">'FID'</span>,</span><br><span class="line">      <span class="string">'Data'</span>: [fid]</span><br><span class="line">  &#125;;</span><br><span class="line">  toolUtil.recordDelete(config.dbName, config.landRelTab, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>地块操作任务需要记录点选地块的要素信息(包括空间、属性信息)或地块的FID，在地图上高亮显示点选的保险地块后调用列表组件的接收函数将该要素信息添加到state中，或在state中剔除，更新组件state完成地块的添加或删除操作。最后更新数据库完成录入工作。</p>
<h1 id="6-与其他框架的比较"><a href="#6-与其他框架的比较" class="headerlink" title="6.与其他框架的比较"></a>6.与其他框架的比较</h1><h2 id="React与Angular"><a href="#React与Angular" class="headerlink" title="React与Angular"></a>React与Angular</h2><ul>
<li>Reactjs作为view本身非常独立，不仅可以在浏览器上用，还可以在server端结合nodejs做模板。</li>
<li>除了独立，Reactjs还很灵活小巧，用起来像拼lego的积木，一个component接着另一个component。</li>
<li><p>在性能方面，由于运用了virtual dom技术，Reactjs只在调用setstate的时候会更新dom，而且还是先更新virtual dom，然后和实际dom比较，最后再更新实际dom。这个过程比起angularjs, knockoutjs的bind方式来说，一是更新dom的次数少，二是更新dom的内容少，速度肯定是快了的。另外Reactjs用了jsx，这个相当于半个新语言了。</p>
</li>
<li><p>angularjs是一个m-v-whateever framework。framework的一个特点就是很全面，除了m-v-whatever面面俱到，它还自带了很多$开头的service，$http, $route, $q(defer),$cookie等等。 </p>
</li>
<li>angularjs的架构清晰，分工明确，整个框架充满了DI的思路，耦合性非常低，对象都是被inject的，也就是说每个对象都可以轻易被替换而不影响其他对象。</li>
</ul>
<h2 id="React与Polymer"><a href="#React与Polymer" class="headerlink" title="React与Polymer"></a>React与Polymer</h2><p>Polymer沿袭了正统的HTML+CSS+JS思路进行革新，很多组件化的功能靠浏览器自身的功能去支持，用浏览器原生的接口去做组件的集成，使用了效率最高的Vanilla JS ，易学易用。但是在兼容性方面不如React，React利用jsx集合Babel转码工具等，较好的解决了兼容性问题支持ie8及以上。</p>
<h2 id="React与jQuery"><a href="#React与jQuery" class="headerlink" title="React与jQuery"></a>React与jQuery</h2><p>jQuery的思路是以dom为中心，所以的操作都在围绕着dom的变化来操作。也就是jQuery的核心思想是dom可变。</p>
<p>React认为页面dom不可变，所以当状态和属性发生变化时会re-render dom。React会根据新的状态和属性生成新的VirtualDOM Tree然后和旧的VirtualDOM Tree做对比(类似于版本控制的机制)。通过对比计算出最小的更新代价，然后将这些更新的方法进入队列。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信接口实现方法(企业号)]]></title>
      <url>http://yoursite.com/2016/08/09/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-发消息-能力接口"><a href="#1-发消息-能力接口" class="headerlink" title="1.发消息(能力接口)"></a>1.发消息(能力接口)</h1><h2 id="1-1-发送接口说明"><a href="#1-1-发送接口说明" class="headerlink" title="1.1    发送接口说明"></a>1.1    发送接口说明</h2><ul>
<li>请求说明<br>Https请求方式: POST<br><a href="https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN" target="_blank" rel="external">https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=ACCESS_TOKEN</a><br>消息型应用支持文本、图片、语音、视频、文件、图文等消息类型。主页型应用只支持文本消息类型，且文本长度不超过20个字。</li>
<li>参数说明<br>access_token:调用接口凭证</li>
<li>权限说明<br>收件人必须处于应用的可见范围内，并且管理组对应用有使用权限、对收件人有查看权限，否则本次调用失败。</li>
<li>返回结果<br>如果无权限，则本次发送失败；如果收件人不存在或未关注，发送仍然执行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"ok"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-消息类型及数据格式"><a href="#1-2-消息类型及数据格式" class="headerlink" title="1.2    消息类型及数据格式"></a>1.2    消息类型及数据格式</h2><p>微信共提供7种消息类型：<br>1、text消息；2、image消息；3、voice消息；4、video消息；5、file消息；6、news消息；7、mpnews消息；以news消息为例，请求数据格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  touser: <span class="string">'userID1|userID2'</span>, <span class="comment">//成员ID列表</span></span><br><span class="line">  msgtype: <span class="string">'news'</span>, <span class="comment">//消息类型</span></span><br><span class="line">  agented: <span class="number">1</span>, <span class="comment">//企业应用的id，整型。</span></span><br><span class="line">  news: &#123;</span><br><span class="line">  	articles: [ <span class="comment">//图文消息</span></span><br><span class="line">  	  &#123;</span><br><span class="line">  	  	title: <span class="string">'Title'</span>, <span class="comment">//标题</span></span><br><span class="line">  	  	description: <span class="string">'Description'</span>, <span class="comment">//描述</span></span><br><span class="line">  	  	url: <span class="string">'URL'</span>, <span class="comment">//点击后跳转的链接</span></span><br><span class="line">  	  	picurl: <span class="string">'PIC_URL'</span> <span class="comment">//图文消息的图片链接</span></span><br><span class="line">  	  &#125;,</span><br><span class="line">  	  &#123;</span><br><span class="line">  	  	title: <span class="string">'Title'</span>,</span><br><span class="line">  	  	description: <span class="string">'Description'</span>,</span><br><span class="line">  	  	url: <span class="string">'URL'</span>,</span><br><span class="line">  	  	picurl: <span class="string">'PIC_URL'</span></span><br><span class="line">  	  &#125;</span><br><span class="line">  	]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-调用方法"><a href="#1-3-调用方法" class="headerlink" title="1.3    调用方法"></a>1.3    调用方法</h2><p>以服务器端语言PHP为例，具体介绍接口的调用过程：</p>
<h3 id="1-3-1-获取企业密钥"><a href="#1-3-1-获取企业密钥" class="headerlink" title="1.3.1    获取企业密钥"></a>1.3.1    获取企业密钥</h3><p>利用cURL请求URL，请求方式为GET请求，这里为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<p>同时，由于获取密钥的有效期为7200秒，(通过获取到的结果中expires_in属性可以查看)，频繁请求接口容易导致受限，为解决以上问题我们采用读取PHP文件缓存的技术。这里我们调用PHP的file_get_contents()函数来读取PHP文件，它的作用是将整个文件读入一个字符串中，且可安全用于二进制对象。成功读取到文件后便可利用文件存储的缓存时间与当前时间做判断，若小于当前时间代表密钥过期，需重新请求密钥，若大于当前时间可直接获得缓存密钥，实现过程如图1所示。</p>
<p><img src="http://i2.piimg.com/567571/1cb1e11e9993fb71.png" alt=""></p>
<h3 id="1-3-2-JSON编码"><a href="#1-3-2-JSON编码" class="headerlink" title="1.3.2    JSON编码"></a>1.3.2    JSON编码</h3><p>整理并通过json_encode函数编码请求参数时，会出现使汉字编码成’\U<em>*</em>’的形式(php5.4已经解决这个问题，使用json_encode(“中文”, JSON_UNESCAPED_UNICODE))。为解决此问题，我们采用字符转码方式，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode_json</span>(<span class="params">$str</span>)</span>&#123;  </span><br><span class="line">  $code = json_encode($str);  </span><br><span class="line">  <span class="keyword">return</span> preg_replace(<span class="string">"#\\\u([0-9a-f]&#123;4&#125;)#ie"</span>, <span class="string">"iconv('UCS-2', 'UTF-8', pack('H4', '\\1'))"</span>, $code); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过简单的正则替换方法，解决汉字不能正常显示的问题。</p>
<h3 id="1-3-3-POST请求"><a href="#1-3-3-POST请求" class="headerlink" title="1.3.3    POST请求"></a>1.3.3    POST请求</h3><p>发出POST请求，完成发送消息功能。这里我们使用cURL实现POST请求的方法。cURL是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。使用cURL完成请求的基本步骤为：<br>1）初始化    curl_init()<br>2）设置变量     curl_setopt()<br>3）执行并获取结果    curl_exec()<br>4）释放cURL句柄    curl_close()<br>通过设置cURL选项实现POST的请求如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);</span><br></pre></td></tr></table></figure></p>
<h1 id="2-身份验证-认证接口"><a href="#2-身份验证-认证接口" class="headerlink" title="2    身份验证(认证接口)"></a>2    身份验证(认证接口)</h1><h2 id="2-1-OAuth验证接口"><a href="#2-1-OAuth验证接口" class="headerlink" title="2.1     OAuth验证接口"></a>2.1     OAuth验证接口</h2><p>企业应用中的URL链接（包括自定义菜单或者消息中的链接），可以通过微信OAuth2.0验证接口来获取成员的身份信息。</p>
<h2 id="2-2-企业获取code"><a href="#2-2-企业获取code" class="headerlink" title="2.2     企业获取code"></a>2.2     企业获取code</h2><p>企业如果需要员工在跳转到企业网页时带上员工的身份信息，需构造如下的链接：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//open.weixin.qq.com/connect/oauth2/authorize?appid=CORPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span></span><br></pre></td></tr></table></figure></p>
<p>参数说明：</p>
<ul>
<li>appid: 企业的CorpID</li>
<li>redirect_uri: 授权后重定向的回调链接地址</li>
<li>response_type: 返回类型，此时固定为code</li>
<li>scope: 应用授权作用域，此时固定为：snsapi_base</li>
<li>#wechat_redirect: 微信终端使用此参数判断是否需要带上身份信息<br>员工点击后，页面将跳转至 redirect_uri?code=CODE&amp;state=STATE，企业可根据code参数获得员工的userid。</li>
</ul>
<h2 id="2-3-根据code获取成员信息"><a href="#2-3-根据code获取成员信息" class="headerlink" title="2.3     根据code获取成员信息"></a>2.3     根据code获取成员信息</h2><ul>
<li><p>Https请求方式：GET</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=ACCESS_TOKEN&amp;code=CODE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>参数说明：<br>access_token：调用接口凭证<br>code：通过成员授权获取到的code</p>
</li>
<li><p>返回结果：</p>
</li>
</ul>
<p>企业成员授权时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'UserId'</span>:<span class="string">'USERID'</span>,</span><br><span class="line">  <span class="string">'DeviceId'</span>:<span class="string">'DEVICEID'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>非企业成员授权时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'OpenId'</span>:<span class="string">'OPENID'</span>,</span><br><span class="line">  <span class="string">'DeviceId'</span>:<span class="string">'DEVICEID'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>出错时返回示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'errcode'</span>: <span class="number">40029</span>,</span><br><span class="line">  <span class="string">'errmsg'</span>:<span class="string">'invalid code'</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-4-调用方法"><a href="#2-4-调用方法" class="headerlink" title="2.4     调用方法"></a>2.4     调用方法</h2><p>获取企业密钥和code参数后，通过cURL配置选项参数，发送GET请求，并将请求结果返回到前端进行解析和处理。这里前端code参数的获取来自当前所有浏览器都支持的window对象的location对象，其包含的search属性即window.Location.search用来获取当前url中”?”后面的字符串。编写正则表达式以匹配字符串中的code值:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>); </span><br><span class="line"><span class="keyword">var</span> url=<span class="built_in">window</span>.location.search;</span><br><span class="line"><span class="keyword">var</span> r = url.substr(<span class="number">1</span>).match(reg);</span><br><span class="line"><span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="3-管理成员-资源接口"><a href="#3-管理成员-资源接口" class="headerlink" title="3    管理成员(资源接口)"></a>3    管理成员(资源接口)</h1><p>微信企业号公众平台提供管理企业内部成员包括创建、更新、删除以及获取成员的开放接口。根据各接口的请求方式，在服务器端(以PHP为例)利用cURL发送请求并将请求结果返回到前端进行解析和处理，通过AJAX实现前后端数据的传递。此处，我们采用了jQuery的promise用法，即函数调用返回一个promise对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//… some code</span></span><br><span class="line">	<span class="keyword">return</span> $.ajax(<span class="built_in">Object</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>
<p>Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。</p>
<p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p>
<p>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于百度地图API的空间地理编码技术]]></title>
      <url>http://yoursite.com/2016/08/09/%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9C%B0%E7%90%86%E7%BC%96%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h1 id="1-地理编码概述"><a href="#1-地理编码概述" class="headerlink" title="1.地理编码概述"></a>1.地理编码概述</h1><p>随着各种类型空间数据的日益丰富，如何对这些异构数据进行有效融合和集成越来越成为地理信息科学目前需要迫切解决的问题之一。地理编码也称地址匹配，是指将地址映射成地理坐标的过程，即提供一种把描述成文本地址的地理位置信息转换为地理坐标的方式。它是地址定位的关键技术，也是解决信息共享的有效途径。本文提出了一种基于百度API将本地地址信息数据发布到在线地图的实现技术，主要研究本地数据的上传与解析以及坐标转换的问题。提出的技术路线在华东师范大学具有自主知识产权的CCGIS平台上得到了很好的验证。</p>
<h1 id="2-主流地图API简介"><a href="#2-主流地图API简介" class="headerlink" title="2.主流地图API简介"></a>2.主流地图API简介</h1><p>当前用户关注度比较高的地图API主要有Google地图API、微软公司的bing地图API以及国内的百度地图API；对比其他两家国外地图而言，百度地图拥有更简洁明了的界面，地图的更新速度明显优于Google，对国内中小城市地图信息的覆盖也较前者更加全面。百度地图API是一套由javascript语言编写的应用程序接口，支持PC端和移动端基于浏览器的地图应用开发，提供的地图服务功能包括地图的查询、显示、标注及编辑等。本文研究的技术所用到的主要API包括地址解析及逆地址解析接口，即通过调用地址解析器实例的getPoint()方法对指定的地址进行解析，将字符串地址转为BDLatLng。由于百度对外接口的坐标系并不是GPS采集的真实经纬度，这里我们通过坐标转换接口对百度坐标进行了百度坐标转WGS坐标的坐标转换工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3--font-face使用]]></title>
      <url>http://yoursite.com/2016/08/09/CSS3--font-face%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><ul>
<li>@font-face是CSS3中的一个模块，主要是把自己定义的Web字体嵌入到你的网页中，不用担心兼容性，@font-face在IE4中都支持。</li>
<li>如果是用字体做logo，英文的话字体和图片占用大小差不多，但是中文的字体包一般比较大，最好还是使用图片的形式。</li>
</ul>
<h2 id="为什么要将icon做成字体？"><a href="#为什么要将icon做成字体？" class="headerlink" title="为什么要将icon做成字体？"></a>为什么要将icon做成字体？</h2><p>字体文件小，一般20-50kb； 容易编辑和维护，尺寸和颜色可以用css来控制； 透明完全兼容IE6；当然，Icon Font也是有缺点的，由于是字体，所以只支持图片上是纯色的，多种颜色的就不支持了。</p>
<h2 id="各个浏览器对字体格式的支持是最大的区别："><a href="#各个浏览器对字体格式的支持是最大的区别：" class="headerlink" title="各个浏览器对字体格式的支持是最大的区别："></a>各个浏览器对字体格式的支持是最大的区别：</h2><p>webkit/safari：支持TrueType/OpenType(.ttf)，OpenType PS(.otf)，iOS4.2+支持.ttf，iOS 4.2以下只支持SVG字体；<br>Chrome：除webkit支持的以外，从Chrome 6开始，开始支持woff格式；<br>Firefox：支持.ttf和.otf，从Firefox 3.6开始支持woff格式；<br>Opera：支持.ttf、.otf、.svg。Opera 11开始支持WOFF； IE：只支持eot格式，IE9开始支持woff。</p>
<h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2.快速实践"></a>2.快速实践</h1><ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体</a>需要格式为.tff格式的字体文件</li>
<li>搜索Webfont Generator，或者直接使用<a href="https://www.web-font-generator.com/" target="_blank" rel="external">该网站</a>提供的服务。这很简单，进入网站后选择.tff字体文件上传，勾选同意的复选框，点击<code>Generate web font</code>，点击<code>Download Package</code>下载，解压缩文件。</li>
<li>使用<br>新建index.css</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.svg#SingleMaltaRegular'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-class">.demo</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>hello world!You are my Destiny<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="3-字体icon"><a href="#3-字体icon" class="headerlink" title="3.字体icon"></a>3.字体icon</h1><p>使用某些字体，如：<code>WebSymbols-Regular</code><a href="http://pan.baidu.com/s/1jIO0Y2q" target="_blank" rel="external">百度云下载地址</a>，<code>Guifx</code>字体，包括现在开源的比较流行的<code>Font Awesome</code>,使用方法同上。在html文件中如下示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>C<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>D<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>F<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每一行显示的是其对应的图标<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/font-icon.png" alt=""></p>
<p>参考文献：</p>
<ul>
<li><a href="http://www.dafont.com/" target="_blank" rel="external">下载字体的地方</a></li>
<li><a href="http://www.w3cplus.com/content/css3-font-face" target="_blank" rel="external">CSS3 @font-face</a></li>
<li><a href="http://www.w3cplus.com/css3/web-icon-with-font-face" target="_blank" rel="external">@font-face制作Web Icon</a></li>
</ul>
<p>附在线icon font字体图标库：<br><a href="http://www.weste.net/2013/12-13/94697.html" target="_blank" rel="external">http://www.weste.net/2013/12-13/94697.html</a><br><a href="http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51" target="_blank" rel="external">http://www.iconfont.cn/?spm=a313x.7781069.0.0.pICV51</a> 阿里巴巴矢量图标<br><a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="external">https://www.fontsquirrel.com/tools/webfont-generator</a><br><a href="http://fontello.com/" target="_blank" rel="external">http://fontello.com/</a><br><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">https://icomoon.io/app/#/select</a><br><a href="http://glyphicons.com/" target="_blank" rel="external">http://glyphicons.com/</a><br><a href="http://fontawesome.io/" target="_blank" rel="external">http://fontawesome.io/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript的setter getter方法总结]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E7%9A%84setter%20getter%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>javascript的setter getter方法一共有五种实现方式</p>
<ul>
<li>1.通过对象初始化器定义</li>
<li>2.使用 Object.create 方法</li>
<li>3.使用 Object.defineProperty 方法</li>
<li>4.使用 Object.defineProperties 方法</li>
<li>5.使用 Object.prototype.<strong>defineGetter</strong> 以及 Object.prototype.<strong>defineSetter</strong> 方法</li>
</ul>
<h1 id="1-通过对象初始化器定义"><a href="#1-通过对象初始化器定义" class="headerlink" title="1.通过对象初始化器定义"></a>1.通过对象初始化器定义</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,<span class="comment">//通过 get,set的 b,c方法间接性修改 a 属性</span></span><br><span class="line">    set c(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.c = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<p>我们试着将get set的方法改写成同名,结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a : <span class="number">8</span>,</span><br><span class="line">    get b()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set b(x)&#123;<span class="keyword">this</span>.a = x/<span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//9</span></span><br><span class="line">o.b = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//25</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//26</span></span><br></pre></td></tr></table></figure>
<p>es6中的新语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">"bb"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"cc"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    _a : <span class="number">8</span>,</span><br><span class="line">    get [b]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>._a +<span class="number">1</span>;&#125;,</span><br><span class="line">    set [c](x)&#123;<span class="keyword">this</span>._a = x/<span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(o[b]);<span class="comment">//9</span></span><br><span class="line">o[<span class="string">"cc"</span>] = <span class="number">50</span>;<span class="comment">//等同于o.c = 50;</span></span><br><span class="line"><span class="built_in">console</span>.log(o._a);<span class="comment">//25</span></span><br></pre></td></tr></table></figure>
<h1 id="2-使用-Object-create-方法"><a href="#2-使用-Object-create-方法" class="headerlink" title="2.使用 Object.create 方法"></a>2.使用 <code>Object.create</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125;;</span><br><span class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o.a;<span class="comment">//或者this.a结果一样</span></span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//undefined</span></span><br><span class="line">o.bar = <span class="number">12</span>; </span><br><span class="line"><span class="built_in">console</span>.log(o.bar); <span class="comment">//12</span></span><br></pre></td></tr></table></figure>
<h1 id="3-使用-Object-defineProperty-方法"><a href="#3-使用-Object-defineProperty-方法" class="headerlink" title="3.使用 Object.defineProperty 方法"></a>3.使用 <code>Object.defineProperty</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; a: <span class="number">10</span> &#125; <span class="comment">//声明一个对象,包含一个 a 属性,值为1</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//10</span></span><br><span class="line">o.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h1 id="4-使用-Object-defineProperties-方法"><a href="#4-使用-Object-defineProperties-方法" class="headerlink" title="4.使用 Object.defineProperties 方法"></a>4.使用 <code>Object.defineProperties</code> 方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; a: <span class="number">1</span>, b: <span class="string">"sss"</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    <span class="string">"A"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.a = val; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"B"</span>: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.b + <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.b = val &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//sss2</span></span><br><span class="line">obj.A = <span class="number">3</span>;</span><br><span class="line">obj.B = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.A);<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.B);<span class="comment">//hello2</span></span><br></pre></td></tr></table></figure>
<h1 id="5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法"><a href="#5-使用Object-prototype-defineGetter-以及-Object-prototype-defineSetter-方法" class="headerlink" title="5.使用Object.prototype.__defineGetter__ 以及 Object.prototype.__defineSetter__ 方法"></a>5.使用<code>Object.prototype.__defineGetter__</code> 以及 <code>Object.prototype.__defineSetter__</code> 方法</h1><p>这两种方法是非标准，最好不要在开发中使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; _a: <span class="number">1</span> &#125;;</span><br><span class="line">o.__defineGetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a;</span><br><span class="line">&#125;);</span><br><span class="line">o.__defineSetter__(<span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._a = val;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//1</span></span><br><span class="line">o.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.a);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[现代web前端开发工具和流程]]></title>
      <url>http://yoursite.com/2016/08/04/%E7%8E%B0%E4%BB%A3web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%92%8C%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><ul>
<li><strong>SVN</strong> </li>
<li><strong>GIT</strong><br>推荐使用git，git安装和图形化界面tortoiseGit安装，<a href="http://www.cnblogs.com/peterzd/archive/2012/04/22/2465230.html" target="_blank" rel="external">git与github联系</a>不在本文的讨论范围，请自行搜索。<br>在github中新建一个项目<br>在本地使用图形Git–&gt;git clone<br>或者使用命令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone  git:<span class="comment">//github.com/someone/some_project.git</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>文件夹就是我们的项目文件夹。</p>
<h1 id="2-前端自动化"><a href="#2-前端自动化" class="headerlink" title="2.前端自动化"></a>2.前端自动化</h1><ul>
<li><strong><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></strong></li>
<li><strong><a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></strong></li>
</ul>
<h2 id="2-1-gulp"><a href="#2-1-gulp" class="headerlink" title="2.1 gulp"></a>2.1 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a></h2><p>Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。当使用流时，Gulp去除了中间文件，只将最后的输出写入磁盘，整个过程因此变得更快。</p>
<h3 id="2-1-1-安装命令行工具"><a href="#2-1-1-安装命令行工具" class="headerlink" title="2.1.1 安装命令行工具"></a>2.1.1 安装命令行工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-创建好package-json文件（包管理文件）-安装局部gulp"><a href="#2-1-2-创建好package-json文件（包管理文件）-安装局部gulp" class="headerlink" title="2.1.2 创建好package.json文件（包管理文件）,安装局部gulp"></a>2.1.2 创建好package.json文件（包管理文件）,安装局部gulp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>
<p>下载的包会存放在项目的node_modules文件夹下<br>包依赖会加入到<code>package.json</code>中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-1-3-新建gulpfile-js文件"><a href="#2-1-3-新建gulpfile-js文件" class="headerlink" title="2.1.3 新建gulpfile.js文件"></a>2.1.3 新建gulpfile.js文件</h3><h4 id="四个主要API"><a href="#四个主要API" class="headerlink" title="四个主要API"></a>四个主要API</h4><ul>
<li>gulp.task(name[, deps], fn)：注册任务</li>
<li>gulp.src(globs[, options])：指明源文件路径</li>
<li>gulp.dest(path)：指明任务处理后的目标输出路径</li>
<li>gulp.watch(glob[, options], tasks)／gulp.watch(glob[, options, cb])：监视文件的变化并运行相应的任务。</li>
</ul>
<p>实例见<code>3.2 在gulpfile.js中配置</code>。</p>
<h3 id="2-1-4-运行"><a href="#2-1-4-运行" class="headerlink" title="2.1.4 运行"></a>2.1.4 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure>
<h2 id="2-2-grunt"><a href="#2-2-grunt" class="headerlink" title="2.2 grunt"></a>2.2 <a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></h2><h3 id="2-2-1-安装-grunt-cli"><a href="#2-2-1-安装-grunt-cli" class="headerlink" title="2.2.1 安装 grunt-cli"></a>2.2.1 安装 grunt-cli</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli -g</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-配置grunt"><a href="#2-2-2-配置grunt" class="headerlink" title="2.2.2 配置grunt"></a>2.2.2 配置grunt</h3><p>在项目中添加两份文件：package.json 和 Gruntfile。</p>
<ul>
<li>package.json //项目自动化所依赖的相关插件。</li>
<li>Gruntfile.js //项目自动化工作流配置文件。</li>
</ul>
<h4 id="安装Grunt-和-grunt插件"><a href="#安装Grunt-和-grunt插件" class="headerlink" title="安装Grunt 和 grunt插件"></a>安装Grunt 和 grunt插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt --save-dev</span><br><span class="line">npm install grunt-contrib-jshint --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="配置Gruntfile-js文件"><a href="#配置Gruntfile-js文件" class="headerlink" title="配置Gruntfile.js文件"></a>配置Gruntfile.js文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Project configuration.</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">    uglify: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        banner: <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      build: &#123;</span><br><span class="line">        src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</span><br><span class="line">        dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载包含 "uglify" 任务的插件。</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认被执行的任务列表。</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-运行"><a href="#2-2-3-运行" class="headerlink" title="2.2.3 运行"></a>2.2.3 运行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure>
<h1 id="3-SASS"><a href="#3-SASS" class="headerlink" title="3.SASS"></a>3.SASS</h1><p>‘CSS预处理器’，它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p>
<h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-sass</span><br><span class="line">npm install --save-dev gulp-watch</span><br></pre></td></tr></table></figure>
<p><code>gulp-sass</code>是用来将SASS转化为CSS的，<code>gulp-watch</code>是用来观察文件修改的变化<br>我们来看<code>package.json</code>文件的变化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"gulp"</span>:<span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="string">"gulp-sass"</span>:<span class="string">"^2.3.1"</span>,</span><br><span class="line">    <span class="string">"gulp-watch"</span>:<span class="string">"^4.3.6"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-在gulpfile-js-中配置"><a href="#3-2-在gulpfile-js-中配置" class="headerlink" title="3.2 在gulpfile.js 中配置"></a>3.2 在<code>gulpfile.js</code> 中配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> path = &#123;</span><br><span class="line">    sass_isstudy:<span class="string">'./modules/istudy/sass/'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(path.sass_isstudy+<span class="string">'*.scss'</span>)</span><br><span class="line">        .pipe(sass.sync().on(<span class="string">'error'</span>, sass.logError))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./modules/istudy/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass:watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     gulp.watch(path.sass_isstudy+<span class="string">'*.scss'</span>, [<span class="string">'sass'</span>]);</span><br><span class="line">     <span class="comment">// gulp.watch('./modules/istudy/sass/*.scss').on('change',livereload);</span></span><br><span class="line">&#125;);   <span class="comment">//监控sass变化</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-命令执行"><a href="#3-3-命令执行" class="headerlink" title="3.3 命令执行"></a>3.3 命令执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp sass:watch</span><br></pre></td></tr></table></figure>
<p>执行上诉命令，在sass文件修改、保存后，gulp就会将sass文件转化为css文件</p>
<h1 id="4-模块化编程"><a href="#4-模块化编程" class="headerlink" title="4.模块化编程"></a>4.模块化编程</h1><p>具体参见文章【javascript模块化编程】</p>
<h2 id="4-1-ES5时代"><a href="#4-1-ES5时代" class="headerlink" title="4.1 ES5时代"></a>4.1 <strong>ES5时代</strong></h2><p>以seajs为例：<br>CMD(Custom Module Definition)通用模块加载</p>
<h3 id="4-1-1-seajs"><a href="#4-1-1-seajs" class="headerlink" title="4.1.1 seajs"></a>4.1.1 seajs</h3><p><strong>引入seajs文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>seajs 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-ES6时代"><a href="#4-2-ES6时代" class="headerlink" title="4.2 ES6时代"></a>4.2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<h1 id="5-组件化"><a href="#5-组件化" class="headerlink" title="5.组件化"></a>5.组件化</h1><p>组件化的思路是将一个模块独立开来，比如要写一个选择器按钮，将其分为三层：</p>
<p>  数据层：用来决定按钮个数以及按钮是否选择<br>  表现层：按钮使用现有的ui组件<br>  逻辑层：按钮事件等逻辑处理</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://blog.csdn.net/sunboy_2050/article/details/7529022" target="_blank" rel="external">Git 常用命令详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">SASS用法指南-阮一峰</a></li>
<li><a href="http://www.w3cplus.com/" target="_blank" rel="external">SASS入门</a></li>
<li>[阮一峰-es6入门]（<a href="http://es6.ruanyifeng.com/）" target="_blank" rel="external">http://es6.ruanyifeng.com/）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化]]></title>
      <url>http://yoursite.com/2016/08/04/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="1-ES5时代"><a href="#1-ES5时代" class="headerlink" title="1 ES5时代"></a>1 <strong>ES5时代</strong></h2><h3 id="1-1-原生代码实现模块化"><a href="#1-1-原生代码实现模块化" class="headerlink" title="1.1 原生代码实现模块化"></a>1.1 原生代码实现模块化</h3><p><strong>1) 对象写法</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">　　　　_count : <span class="number">0</span>,</span><br><span class="line">　　　　m1 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　m2 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>2) 立刻执行函数</strong>(Immediately-Invoked Function Expression，IIFE) or 匿名闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>这样可以很好的保护私有变量，通过return来设置公开的方法。缺点也有: 动态添加方法的时候比较麻烦，且无法修改内部私有变量。<br><strong>3) 放大模式 or 宽放大模式（Loose augmentation）</strong><br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(module1);</span><br></pre></td></tr></table></figure></p>
<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">//...</span></span><br><span class="line">　　　　<span class="keyword">return</span> mod;</span><br><span class="line">　　&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>测试</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleTest = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value1=<span class="number">0</span>, privateName=<span class="string">'张三'</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateAddTopic</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 这里是内部处理代码</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"内部函数"</span>);</span><br><span class="line">         <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">    mod.name = privateName;</span><br><span class="line">    mod.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.f1();</span><br><span class="line">    &#125;;</span><br><span class="line">    mod.f1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"f1--hello"</span>);</span><br><span class="line">    &#125;;　</span><br><span class="line">    mod.f2=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        privateAddTopic(data);</span><br><span class="line">    &#125;;　　　</span><br><span class="line">　　<span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.moduleTest || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">moduleTest.init();</span><br><span class="line">moduleTest.f2(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//张三</span></span><br><span class="line">moduleTest.name = <span class="string">'李四'</span>;     <span class="comment">//修改模块中的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(moduleTest.name); <span class="comment">//李四</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-CommonJS-AMD-CMD"><a href="#1-2-CommonJS-AMD-CMD" class="headerlink" title="1.2 CommonJS/AMD/CMD"></a>1.2 CommonJS/AMD/CMD</h3><p>现代模块的基本思想实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> myModules = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> modules = &#123;&#125;; <span class="comment">//定义的模块保存在这个对象里面</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name, deps, impl</span>) </span>&#123;<span class="comment">//impl是implement的简写，实现的方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class="line">                deps[i] = modules[deps[i]]; <span class="comment">//从保存的对象中获取依赖的模块,注：依赖的模块，肯定已经被define()存放在modules对象中了。</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            modules[name] = impl.apply(impl, deps);<span class="comment">//如果此时的模块引入别的模块deps，就将deps作为impl实现的方法的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * [get 通过名字获得模块]</span><br><span class="line">         * @param  &#123;[type]&#125; name [模块名]</span><br><span class="line">         * @return &#123;[type]&#125;      [完整独立模块]</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> modules[name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            define: define,</span><br><span class="line">            get: get</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    myModules.define(<span class="string">"bar"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello "</span> + who;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hello: hello</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    myModules.define(<span class="string">"foo"</span>, [<span class="string">"bar"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="string">'张三'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bar.hello(n).toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            awe: awe</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bar = myModules.get(<span class="string">"bar"</span>);</span><br><span class="line">    <span class="keyword">var</span> foo = myModules.get(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">    foo.awe();<span class="comment">//HELLO 张三</span></span><br></pre></td></tr></table></figure>
<p><strong> 1) CommonJS</strong><br>node.js的<a href="http://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="external">模块系统</a>，就是参照<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="external">CommonJS</a>规范实现的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p>
<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。这就催生AMD规范到来的背景。</p>
<p><strong> 2) AMD</strong><br><strong>AMD</strong>(Asynchronous Module Definition)是异步模块加载的意思，会预执行(依赖)模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">　　math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/" target="_blank" rel="external">require.js</a>和<a href="https://github.com/cujojs/curl" target="_blank" rel="external">curl.js</a></p>
<p><strong> 3) CMD</strong><br>CMD(Custom Module Definition)通用模块加载，SeaJS遵循CMD规范，并行加载所有依赖的模块， 但不会立即执行模块，等到真正需要(require)的时候才开始解析（懒执行）。<br><strong>引入SeaJS文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../common/jsext/sea-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>SeaJS 的简单配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>);<span class="comment">//入口</span></span><br></pre></td></tr></table></figure></p>
<p><strong>定义模块：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>另外可以使用seajs-text加载html文件或者tpl片段，seajs-css加载css文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-text.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">define(<span class="string">"main"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// You can require `.tpl` file directly</span></span><br><span class="line"> <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">"./data.tpl"</span>)</span><br><span class="line"><span class="comment">//或者html</span></span><br><span class="line"><span class="keyword">var</span> html =<span class="built_in">require</span>(<span class="string">"./a.html"</span>);</span><br><span class="line">$(<span class="string">'.some_class'</span>).append(html);</span><br><span class="line">&#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>seajs-css<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/seajs-css.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line"></span><br><span class="line"><span class="comment">// seajs can load css file after loading css plugin.</span></span><br><span class="line">seajs.use(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"><span class="comment">//很多时候可以使用require的方式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"path/to/some.css"</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-ES6时代"><a href="#2-ES6时代" class="headerlink" title="2 ES6时代"></a>2 <strong>ES6时代</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello "</span>+who;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;hello&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;hello&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(bar.hello(name).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;awe&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">"bar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'张三'</span>));<span class="comment">//hello 张三</span></span><br><span class="line"></span><br><span class="line">foo.awe();<span class="comment">//HELLO ZS</span></span><br></pre></td></tr></table></figure>
<p>当然现在需要使用babel转成es5，并且要使用打包工具browserify webpack rollup 等才能直接在现在的浏览器上运行。</p>
<p>参考阅读：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程（一）：模块的写法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="external">Javascript模块化编程（二）：AMD规范</a> </li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="external">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="https://github.com/seajs" target="_blank" rel="external">seajs-github</a></li>
<li><a href="http://seajs.org/docs/" target="_blank" rel="external">seajs官网</a></li>
<li><a href="https://github.com/seajs/seajs-text/issues/1" target="_blank" rel="external">seajs-text</a></li>
<li>《你不知到的javascipt》</li>
<li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰-es6入门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[this指针总结]]></title>
      <url>http://yoursite.com/2016/08/04/this/</url>
      <content type="html"><![CDATA[<p>文章只是简单列举了方式和一些会改变this指针的情况     </p>
<h1 id="1-探寻之，必昭然若揭"><a href="#1-探寻之，必昭然若揭" class="headerlink" title="1.探寻之，必昭然若揭"></a>1.探寻之，必昭然若揭</h1><ol>
<li>new绑定            this–&gt;新创建的对象<br><code>var bar = new foo()</code>   </li>
<li>call/bind 硬绑定      this–&gt;指定的对象<br> <code>var bar = foo.call(obj2)</code>   </li>
<li>隐式绑定       this–&gt;上下文对象<br> <code>var bar = obj1.foo()</code>   </li>
<li>默认绑定       this–&gt;全局对象window    </li>
</ol>
<p>四种情况也是按照优先级排列的    </p>
<h1 id="2-实践之，定了然于胸"><a href="#2-实践之，定了然于胸" class="headerlink" title="2.实践之，定了然于胸"></a>2.实践之，定了然于胸</h1><h2 id="2-1-回掉函数会改变this指针"><a href="#2-1-回掉函数会改变this指针" class="headerlink" title="2.1 回掉函数会改变this指针"></a>2.1 回掉函数会改变this指针</h2><p>  绑定<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbTools.queryUsrDB2Datas(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    usrResDiv.fyDiv.apply(usrResDiv,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分"><a href="#2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分" class="headerlink" title="2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)"></a>2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)</h2><h2 id="2-3-绑定的例外"><a href="#2-3-绑定的例外" class="headerlink" title="2.3 绑定的例外"></a>2.3 绑定的例外</h2><ul>
<li><p><code>foo.call(null)</code> 使用<code>null</code>或者<code>undefined</code>,忽略传入对象的<code>this</code>,实际运用的是默认绑定，这也是这样方法的弊端，this指向<code>window</code>。<br>修改<code>var DMZ = Object.create(null); foo.apply(DMZ,[2,3]);</code></p>
</li>
<li><p>间接引用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;a:<span class="number">3</span>,foo:foo&#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123;a:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">o.foo();<span class="comment">//3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">//2 this--&gt;window</span></span><br><span class="line">p.foo();  <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<p><code>p.foo = o.foo</code>返回值是目标函数的引用，因此调用位置是foo(),而不是<code>p.foo()</code>,<code>o.foo()</code>;</p>
<h1 id="3-避免之，需谨小事微"><a href="#3-避免之，需谨小事微" class="headerlink" title="3.避免之，需谨小事微"></a>3.避免之，需谨小事微</h1><p>除了第一部分的方法外，还有一些常用的方法。</p>
<h2 id="3-1-ES5中我们经常会使用self-this，如："><a href="#3-1-ES5中我们经常会使用self-this，如：" class="headerlink" title="3.1 ES5中我们经常会使用self = this，如："></a>3.1 ES5中我们经常会使用<code>self = this</code>，如：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(self.a);</span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-ES6中的箭头函数-this词法"><a href="#3-2-ES6中的箭头函数-this词法" class="headerlink" title="3.2 ES6中的箭头函数(this词法)"></a>3.2 ES6中的箭头函数(this词法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout =&gt; &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//this继承来自foo()</span></span><br><span class="line">	&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript面向对象和面向委托]]></title>
      <url>http://yoursite.com/2016/08/04/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p>昨天看了一本书《你不知道的javascript(上)》关于这方面的内容，体会颇深，其中书中讲到的把javascript当作是面向委托的语言比面向对象的解释更加贴切，下面我就简单结合自己的理解，书写阐述一下，也可以作为一种笔记记录。     </p>
<h3 id="1-提取精华——几个重要的方法"><a href="#1-提取精华——几个重要的方法" class="headerlink" title="1. 提取精华——几个重要的方法"></a>1. 提取精华——几个重要的方法</h3><h4 id="1-1-原型链关联"><a href="#1-1-原型链关联" class="headerlink" title="1.1 原型链关联"></a>1.1 原型链关联</h4><ul>
<li>Bar.prototype = Foo.prototype;</li>
<li>Bar.prototype = new Foo();</li>
<li>Bar.prototype = Object.create(Foo.prototype);<br>第一种方式，没有创建Bar.prototype的新对象Bar.prototype直接引用了Foo.prototype，修改Bar.prototype会影响Foo.prototype<br>第二种方式，创建了一个关联Bar.prototype的新对象，new其实是调用Foo的“构造函数”，有些东西会影响到Bar()的后代。<br>第三种方式，Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法：<code>Object.create(proto, [ propertiesObject ])</code><br>参数:proto 一个对象，作为新创建对象的原型。<br>   propertiesObject 可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN</a>  </p>
</blockquote>
</li>
</ul>
<p>ES5之前Object.create Polyfill代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create)&#123;</span><br><span class="line">	<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">		F.prototype = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> F();  <span class="comment">//new的作用参见上述 第二种方式</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ES5:<code>Object.setPrototypeOf(Bar.prototype,Foo.prototype)</code>更加标准可靠</p>
<h4 id="1-2-ES6-class"><a href="#1-2-ES6-class" class="headerlink" title="1.2 ES6 class"></a>1.2 ES6 class</h4><p>内部也是通过原型链实现的，只是一种语法糖。</p>
<h3 id="2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO"><a href="#2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO" class="headerlink" title="2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)"></a>2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)</h3><ul>
<li><p>OO：类的继承是复制行为，简单说关系是父子关系<br>OLOO： 只是对象的关联(基于原型/原型链)，简单说关系是兄弟关系，互相关联。</p>
</li>
<li><p>代码  </p>
</li>
</ul>
<p>OO风格：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"I am "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">	Foo.call(<span class="keyword">this</span>,who);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line"></span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">"hello,"</span>+<span class="keyword">this</span>.identity()+<span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure>
<p>OLOO风格：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Foo = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    identity: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bar = <span class="built_in">Object</span>.create(Foo);</span><br><span class="line">Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"hello,"</span> + <span class="keyword">this</span>.identity() + <span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b1.init(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">b2.init(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure></p>
<h3 id="3-问题探究"><a href="#3-问题探究" class="headerlink" title="3.问题探究"></a>3.问题探究</h3><p><strong>内省：</strong>我们想看Foo和Bar之间的关系<br>OO:对比的是Bar.prototype与Foo的关系，并不是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Bar.prototype <span class="keyword">instanceof</span> Foo);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar.prototype) === Foo.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.isPrototypeOf(Bar.prototype));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>OLOO:是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar) === Foo);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.isPrototypeOf(Bar));</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/06/06/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
